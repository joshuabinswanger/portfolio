---
import BracketOpenH from "./BracketOpenH.astro";
import BracketCloseH from "./BracketCloseH.astro";
import BracketMiddleH from "./BracketMiddleH.astro";
import BracketOpenV from "./BracketOpenV.astro";
import BracketCloseV from "./BracketCloseV.astro";
import BracketMiddleV from "./BracketMiddleV.astro";
import Icon from "./Icon.astro";
import ImageElement from "./ImageElement.astro";
import { getEntry } from "astro:content";
import { imageConfig } from "astro:assets";
import "photoswipe/style.css";

// Get component props from Astro.props
const { project } = Astro.props;

interface Props {
  project: string;
}

// Fetch the specific gallery project by the project name (slug)
const galleryProject = await getEntry(
  "gallery",
  Astro.props.project + "-gallery",
); // Use the `project` prop

if (!galleryProject) {
  throw new Error(
    `Project with slug "${Astro.props.project + "-gallery"}" not found.`,
  );
}

const bgcolor = galleryProject.data.bgcolor;

const imagesAmount = galleryProject.data.images.length;

const instanceId = Math.random().toString(36).slice(2, 11); // Generate a unique ID for each instance

// format string credits
function formatString(input) {
  let formattedString = input
    .replace(/\*\*(.*?)\*\*/g, function (match, textBetweenStars) {
      // Wrap text between ** in <strong> tags
      return "<strong>" + textBetweenStars + "</strong>";
    })
    // Replace *break* with <br>
    .replace(/\*br\*/g, "<br>");

  return formattedString;
}
---

<div
  id={`GalleryElement-${instanceId}`}
  class:list={["GalleryElement swiper"]}
  data-instanceid={instanceId}
  data-bgcolor={bgcolor}
  data-imagesAmount={imagesAmount}
  data-galleryProject={galleryProject}
>
  <div id="ImageWrapper" class:list={"swiper-wrapper"}>
    {
      galleryProject.data.images.map((image, index) => (
        <div
          id={`ImageContainer-${index + 1}`}
          class:list={["ImageContainer", "swiper-slide"]}
          style={index === 0 ? "display: block" : "display: none"}
        >
          <div class:list={"ImageInfo"}>
            {
              <div class:list={"ImageInfoWrapper"}>
                <div id="spacer" />
                <BracketOpenV strokewidth="0.5px" />

                <div class:list={"ImageDescriptionWrapper"}>
                  <Fragment set:html={formatString(image.description)} />
                </div>

                <BracketCloseV strokewidth="0.5px" />
                <div id="spacer" />
                <BracketOpenV strokewidth="0.5px" />

                <div class:list={"ProjectInfoWrapper"}>
                  <Fragment
                    set:html={formatString(
                      galleryProject.data.projectDescription,
                    )}
                  />
                </div>

                <div class:list={"DetailsInfoWrapper"}>
                  <Fragment
                    set:html={formatString(galleryProject.data.credits)}
                  />
                </div>

                <BracketCloseV strokewidth="0.5px" />
                <div id="spacer" />
              </div>
            }
          </div>

          <div class:list={"Filter"} />
          <div id="Image">
            <ImageElement
              project={project}
              imagePath={image.src}
              altText={image.alt}
              width="100%"
              loading={index === 0 ? "eager" : "lazy"}
            />
          </div>
        </div>
      ))
    }
  </div>

  <div id="GalleryDescriptionWrapper">
    <BracketOpenH />

    <div id="TextContainer">
      <div id="TextWrapper">
        <h1>{galleryProject.data.title}</h1>
        <h2>{galleryProject.data.subtitle}</h2>
      </div>
    </div>

    <BracketMiddleH />

    <div id="ArrowWrapper">
      <div id="ArrowContainer" class:list={["arrowPrev"]}>&larr;</div>
      <div id="CounterContainer" class:list={"Counter"}></div>
      <div id="ArrowContainer" class:list={["arrowNext"]}>&rarr;</div>
    </div>

    <BracketMiddleH />

    <div id="Info">
      <Icon icon="Info" width="77%" />
    </div>

    <BracketCloseH />
  </div>
</div>

<script>
  // core version + navigation, pagination modules:
  import Swiper from "swiper";
  import { Navigation, Pagination } from "swiper/modules";
  // import Swiper and modules styles
  import "swiper/css";
  import "swiper/css/navigation";
  import "swiper/css/pagination";

  document.addEventListener("astro:page-load", () => {
    const galleryElements = document.querySelectorAll(".GalleryElement");

    let swiperElement = document.querySelectorAll(`.swiper`);
    let nextButton = document.querySelectorAll(`.ArrowNext`);
    let prevButton = document.querySelectorAll(`.ArrowPrev`);
    let counter = document.querySelectorAll(`.Counter`);

    swiperElement.forEach((slider, index) => {
      let sliderLength = slider.children[0].children.length;
      let result = sliderLength > 1 ? true : false;
      const swiper = new Swiper(slider, {
        modules: [Navigation, Pagination],
        slidesPerView: 1,
        spaceBetween: 30,
        loop: result,
        createElements: true,
        navigation: {
          nextEl: nextButton[index],
          prevEl: prevButton[index],
        },
      });
    });
  });
</script>

<style>
  @import "../styles/global.css";

  .swiper {
    width: 100%;
    height: 100%;
  }

  .swiper-wrapper {
  }

  .swiper-pagination {
  }

  .swiper-button-prev {
  }

  .swiper-button-next {
  }

  .GalleryElement {
    display: grid;
    gap: 1%;
    height: fit-content;
  }

  /* Images Overlapping*/
  #ImageWrapper {
    position: relative;
    display: grid; /* Parent container needs to be relative */
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;
    height: fit-content;
    z-index: 2;
  }

  #ImageWrapper > div {
    grid-column: 1;
    grid-row: 1;
  }

  .ImageContainer {
    position: relative;
    height: fit-content;
    box-shadow: 0px 0px 33px #988f821b;
    z-index: 1;
  }

  .Filter {
    position: absolute;
    top: 0;
    left: 0;
    background-color: #fbf9f400;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(0px);
    z-index: 11;
    transition:
      backdrop-filter ease-in-out 0.2s,
      background-color ease-in-out 0.2s;
  }

  /*   Image Info */

  .ImageInfo {
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    width: 100%;
    height: 100%;
    z-index: 10; /* Ensure it appears above the image */
    display: grid;
    justify-items: center;
    align-items: center;

    background-color: var(--bg-color-trans); /* Example style */
    /* Start with no blur (initial state) */
    backdrop-filter: blur(0px);

    /* Add transition for backdrop-filter */
    transition:
      backdrop-filter ease-in-out 0.2s,
      opacity 0.2s ease-in-out;

    font-size: 0.8rem;

    overflow: hidden;

    @media (--bp-mobile) {
      font-size: 0.6rem;
    }

    @media (--bp-desktop-wide) {
      font-size: 1rem;
      line-height: 1.33;
    }
  }

  .ImageInfoWrapper {
    display: grid;
    width: min(88%, 66ch);
    height: 90%;
    grid-template-rows: 1fr min-content min-content min-content 0.5fr min-content min-content min-content min-content 1fr;
    align-items: center;
  }

  .ImageDescriptionWrapper,
  .ProjectInfoWrapper,
  .DetailsInfoWrapper {
    width: 80%; /* Ensure it takes full width */
    justify-self: center; /* Centers items horizontally */

    span {
      font-family: PowerGrotesk-Medium;
    }

    @media (--bp-mobile) {
      width: 85%;
    }
  }

  /* GalleryDescription */

  #GalleryDescriptionWrapper {
    display: grid;
    width: 100%;
    opacity: 1;
    height: fit-content;
    grid-template-columns: 1.5ch minmax(
        min-content,
        3fr
      ) 3ch 2fr 3ch 3.5ch 1.5ch;
    justify-content: center;
    align-items: center;
    transition: opacity 1.5s ease-in;
  }

  #ArrowWrapper {
    display: grid;
    width: 100%;
    grid-template-columns: auto min-content auto;
    place-items: center;
  }

  /*   #ArrowContainer {
    text-justify: center;
    text-align: center;
    width: 5ch;
    pointer-events: auto;
    cursor: pointer;
    padding: 0.5rem 0.5%;
  }

  #CounterContainer {
    text-align: center;
    height: 100%;
    width: 5ch;
    font-size: 1rem;
    padding: 0.5rem 0.5%;

    @media (--bp-mobile) {
      font-size: 0.8rem;
    }
  } */

  /* Text Elements */
  #TextContainer {
    width: auto;
    display: grid;
    place-items: center;
  }

  h1 {
    font-family: PowerGrotesk-Medium;
    font-weight: 600;
    font-style: normal;
    font-size: 1rem;
    letter-spacing: 0.7px;
    margin: 0px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;

    @media (--bp-mobile) {
      font-size: 0.6rem;
    }
  }

  h2 {
    font-family: PowerGrotesk-Light;
    font-weight: 200;
    font-style: italic;
    font-size: 0.8rem;
    letter-spacing: 0.5px;
    margin: 0px;

    @media (--bp-mobile) {
      font-size: 0.6rem;
    }
  }

  #Info {
    display: grid;
    place-items: center;
    cursor: pointer; /* Ensure it looks clickable */
    pointer-events: auto;
    margin: 0 -5px;
  }
</style>
