---
import BracketOpenH from "./BracketOpenH.astro";
import BracketCloseH from "./BracketCloseH.astro";
import BracketMiddleH from "./BracketMiddleH.astro";
import BracketOpenV from "./BracketOpenV.astro";
import BracketCloseV from "./BracketCloseV.astro";
import BracketMiddleV from "./BracketMiddleV.astro";

import Icon from "./Icon.astro";

import ImageElement from "./ImageElement.astro";
import { getEntry } from "astro:content";

import "photoswipe/style.css";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";

// Get component props from Astro.props
const { project } = Astro.props;

interface Props {
  project: string;
}

// Fetch the specific gallery project by the project name (slug)
const galleryProject = await getEntry(
  "gallery",
  Astro.props.project + "-gallery",
); // Use the `project` prop

if (!galleryProject) {
  throw new Error(
    `Project with slug "${Astro.props.project + "-gallery"}" not found.`,
  );
}

const imagesAmount = galleryProject.data.images.length;

const instanceId = Math.random().toString(36).slice(2, 11); // Generate a unique ID for each instance

// format string credits
function formatString(input) {
  let formattedString = input
    .replace(/\*\*(.*?)\*\*/g, function (match, textBetweenStars) {
      // Wrap text between ** in <strong> tags
      return "<strong>" + textBetweenStars + "</strong>";
    })
    // Replace *break* with <br>
    .replace(/\*br\*/g, "<br>");

  return formattedString;
}
---

<div
  id={`slider-${instanceId}`}
  class:list={"glide GalleryElement"}
  data-instanceId={instanceId}
  data-imagesAmount={imagesAmount}
  data-galleryProject={galleryProject}
>
  <div class:list={"glide__track"} data-glide-el="track">
    <ul class:list={"glide__slides"}>
      {
        galleryProject.data.images.map((image, index) => (
          <li id={`ImageContainer-${index}`} class:list={["glide__slide"]}>
            <div class:list={"ImageInfo"}>
              {
                <div class:list={"ImageInfoWrapper"}>
                  <div id="spacer" />
                  <BracketOpenV strokewidth="0.5px" />

                  <div class:list={"ImageDescriptionWrapper"}>
                    <Fragment set:html={formatString(image.description)} />
                  </div>

                  <BracketCloseV strokewidth="0.5px" />
                  <div id="spacer" />
                  <BracketOpenV strokewidth="0.5px" />

                  <div class:list={"ProjectInfoWrapper"}>
                    <Fragment
                      set:html={formatString(
                        galleryProject.data.projectDescription,
                      )}
                    />
                  </div>

                  <div class:list={"DetailsInfoWrapper"}>
                    <Fragment
                      set:html={formatString(galleryProject.data.credits)}
                    />
                  </div>

                  <BracketCloseV strokewidth="0.5px" />
                  <div id="spacer" />
                </div>
              }
            </div>

            <div class:list={"Filter"} />

            <div id="Image" class:list={"ImageElement"}>
              <ImageElement
                project={project}
                imagePath={image.src}
                altText={image.alt}
                width="100%"
                loading={index === 0 ? "eager" : "lazy"}
              />
            </div>
          </li>
        ))
      }
    </ul>
  </div>

  <div id="GalleryDescriptionWrapper">
    <BracketOpenH />

    <div id="TextContainer">
      <div id="TextWrapper">
        <h1>{galleryProject.data.title}</h1>
        <h2>{galleryProject.data.subtitle}</h2>
      </div>
    </div>

    <BracketMiddleH />

    <div
      id="ArrowWrapper"
      class:list={"glide__arrows"}
      data-glide-el="controls"
    >
      <button
        data-glide-dir="<"
        class:list={["glide__arrow glide__arrow--left"]}>&larr;</button
      >
      <div class:list={"CounterContainer"}></div>
      <button
        data-glide-dir=">"
        class:list={["glide__arrow glide__arrow--right"]}>&rarr;</button
      >
    </div>

    <BracketMiddleH />

    <div id="Info">
      <Icon icon="Info" width="77%" />
    </div>

    <BracketCloseH />
  </div>
</div>

<script>
  import Glide from "@glidejs/glide";

  document.addEventListener("astro:page-load", () => {
    const Sliders = document.querySelectorAll(".glide");

    Sliders.forEach((item, index) => {
      console.log(`This is the slider at index ${index} with ID: ${item.id}`);

      // initialize function CustomLength
      const CustomLength = function (Glide, Components, Events) {
        return {
          mount() {
            Events.emit("glide.length", Components.Sizes.length);
            console.log("Console log", Components.Sizes.length);
          },
        };
      };

      let totalSlides;

      var glide = new Glide(item, { type: "carousel" });

      glide.on("glide.length", (length) => {
        totalSlides = length;
      });

      glide.mount({ CustomLength });

      console.log("Total slides from custom event:", totalSlides);

      // Function to update the counter
      const updateCounter = () => {
        var currentIndex = glide.index;

        // Select the specific CounterContainer within the current slider (item)
        const counterContainer = item.querySelector(".CounterContainer");

        if (counterContainer) {
          // Update the text content of the counter for the current slider
          counterContainer.textContent = `${currentIndex + 1} / ${totalSlides}`;
        } else {
          console.error(
            `CounterContainer not found for slider with ID: ${item.id}`,
          );
        }
      };

      //show/hide Image Info
      // Initialize ImageInfoVisible if it hasn't been
      let ImageInfoVisible; // Ensure it's defined

      const toggleImageInfoVisibility = () => {
        // Get current slide index from Glide
        const currentIndex = glide.index;

        // Select all .ImageInfo elements inside the item
        const activeImageInfo = item.querySelector(
          ".glide__slide--active .ImageInfo",
        );

        // Log the element instead of using a template string
        console.log(activeImageInfo);

        if (ImageInfoVisible) {
          // Use class to control visibility and style
          activeImageInfo.classList.remove("InfoVisible");
          console.log(
            `${item.id} with ImageInfo:${activeImageInfo.id} at index ${currentIndex} Info off`,
          );
        } else {
          // Use class to control visibility and style
          activeImageInfo.classList.add("InfoVisible");
          console.log(
            `${item.id} with ImageInfo:${activeImageInfo.id} at index ${currentIndex} Info on`,
          );
        }

        // Toggle the description visibility state
        ImageInfoVisible = !ImageInfoVisible;
      };

      // Initial counter update when the slider is first loaded
      updateCounter();

      // Listen for the 'run' event, which is triggered on any navigation (e.g., next/prev)
      glide.on("run", updateCounter);

      // Add click event listener to the #Info div of this specific gallery
      const infoDiv = item.querySelector(`#Info`);
      if (infoDiv) {
        infoDiv.addEventListener("click", toggleImageInfoVisibility);
      } else {
        console.error(`Info div not found for selector: ${item.id}`);
      }
    });
  });
</script>

<script>
  import PhotoSwipeLightbox from "photoswipe/lightbox";

  const leftArrowSVGString =
    '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 155 139" "width="39" height="35"><path d="m0 69 69 69 14-12-45-46h116V58H38l44-44L69 0 0 69Z" style="fill-rule:nonzero"/></svg>';
  const CloseSVGString =
    '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 139 139" "width="139" height="139"><path d="m69 83-56 55-13-12 56-57L0 14 13 0l56 56 56-56 13 14-55 55 55 57-13 12-56-55Z"/></svg>';

  function isPhonePortrait() {
    return window.matchMedia("(max-width: 650px) and (orientation: portrait)")
      .matches;
  }

  document.addEventListener("astro:page-load", () => {
    let lightbox;

    const galleryElements = document.querySelectorAll(".GalleryElement");

    galleryElements.forEach((el, index) => {
      const instanceId = el.getAttribute("data-instanceid");
      const imageElements = document.querySelectorAll(`.ImageElement a`);

      const options = {
        arrowPrevSVG: leftArrowSVGString,
        arrowNextSVG: leftArrowSVGString,
        closeSVG: CloseSVGString,

        initialZoomLevel: `fit`,
        bgOpacity: 0.95,
        zoom: false,

        // to apply styles just to this instance of PhotoSwipe
        mainClass: "pswp--custom-bg pswp--custom-icon-colors",

        paddingFn: () => {
          if (isPhonePortrait()) {
            return { top: 0, bottom: 0, left: 10, right: 10 };
          } else {
            return { top: 20, bottom: 40, left: 100, right: 100 };
          }
        },

        showHideAnimationType: "fade",

        gallery: `#slider-${instanceId}`,
        children: imageElements,
        pswpModule: () => import("photoswipe"), // Import the PhotoSwipe module dynamically
      };

      const lightbox = new PhotoSwipeLightbox(options);

      lightbox.init(); // Initialize the lightbox
      console.log(`${imageElements.id}`);
      console.log(`lightbox instance: ${el.id}`);
    });
  });

  document.addEventListener("astro:before-swap", () => {
    const lightbox = new PhotoSwipeLightbox();
    lightbox.destroy();
  });
</script>

<style>
  @import "node_modules/@glidejs/glide/dist/css/glide.core.min.css";

  .GalleryElement {
    display: grid;
    gap: 3px;
    height: fit-content;
  }

  .glide__track {
    position: relative;
    height: fit-content;
    box-shadow: 0px 0px 22px #988f821b;
    z-index: 1;
  }

  .glide__slide {
    position: relative;
    display: grid; /* Parent container needs to be relative */
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;
    height: fit-content;
    z-index: 2;
  }

  .glide__slide > div {
    grid-column: 1;
    grid-row: 1;
  }

  .Filter {
    position: absolute;
    top: 0;
    left: 0;
    background-color: #fbf9f400;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(0px);
    z-index: 11;
    transition:
      backdrop-filter ease-in-out 0.2s,
      background-color ease-in-out 0.2s;
    pointer-events: none;
  }

  /*   Image Info */

  .ImageInfo {
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    width: 100%;
    height: 100%;
    z-index: 10; /* Ensure it appears above the image */
    display: grid;
    justify-items: center;
    align-items: center;

    pointer-events: none; /* Prevent interaction with the description if needed */
    background-color: var(--bg-color-trans); /* Example style */

    /* Start with no blur (initial state) */
    backdrop-filter: blur(0px);

    /* Add transition for backdrop-filter */
    transition:
      backdrop-filter ease-in-out 0.3s,
      opacity 0.3s ease-in-out;

    font-size: 0.8rem;
    hyphens: auto;

    overflow: hidden;

    @media (--bp-mobile) {
      font-size: 0.6rem;
    }

    @media (--bp-desktop-wide) {
      font-size: 1rem;
      line-height: 1.33;
    }
  }

  .InfoVisible {
    opacity: 1;
    backdrop-filter: blur(22px);
    transition:
      opacity 0.3s,
      backdrop-filter 0.3s ease;
  }

  .ImageInfoWrapper {
    display: grid;
    width: min(88%, 66ch);
    height: 90%;
    grid-template-rows: 1fr min-content min-content min-content 0.5fr min-content min-content min-content min-content 1fr;
    align-items: center;
  }

  .ImageDescriptionWrapper,
  .ProjectInfoWrapper,
  .DetailsInfoWrapper {
    width: 80%; /* Ensure it takes full width */
    justify-self: center; /* Centers items horizontally */

    span {
      font-family: PowerGrotesk-Medium;
    }

    @media (--bp-mobile) {
      width: 85%;
    }
  }

  /* GalleryDescription */

  #GalleryDescriptionWrapper {
    display: grid;
    width: 100%;
    opacity: 1;
    height: fit-content;
    grid-template-columns:
      1.5ch minmax(min-content, 3fr) 3ch minmax(min-content, 13ch)
      3ch 3.5ch 1.5ch;
    justify-content: center;
    align-items: center;
    transition: opacity 1.5s ease-in;
  }

  #ArrowWrapper {
    display: grid;
    width: 100%;
    grid-template-columns: auto min-content auto;
    place-items: center;
  }

  button {
    all: unset;
    text-justify: center;
    text-align: center;
    width: stretch;
    cursor: pointer;
    padding: 0.5rem 0.5%;
  }

  .CounterContainer {
    text-align: center;
    width: 5ch;
    font-size: 1rem;
    padding: 0.5rem 0.5%;

    @media (--bp-mobile) {
      font-size: 0.8rem;
    }
  }

  /* Text Elements */
  #TextContainer {
    width: auto;
    display: grid;
    place-items: center;
  }

  h1 {
    font-family: PowerGrotesk-Medium;
    font-weight: 600;
    font-style: normal;
    font-size: 1rem;
    letter-spacing: 0.7px;
    margin: 0px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;

    @media (--bp-mobile) {
      font-size: 0.6rem;
    }
  }

  h2 {
    font-family: PowerGrotesk-Light;
    font-weight: 200;
    font-style: italic;
    font-size: 0.8rem;
    letter-spacing: 0.5px;
    margin: 0px;

    @media (--bp-mobile) {
      font-size: 0.6rem;
    }
  }

  #Info {
    display: grid;
    place-items: center;
    cursor: pointer; /* Ensure it looks clickable */
    pointer-events: auto;
    margin: 0 -5px;
  }
</style>
