---
import Image from "../components/ImageElement.astro";
import NavigationBar from "../components/NavigationBar.astro"
import NavigationBarMobile from "../components/NavigationBarMobile.astro"
import "../styles/global.css";

---
<div id="ProjectTopWrapper">
      
	<div id="NavBar">
	  <NavigationBar />
	</div>

	<div id="ProjectElementWrapper">

		{/* We want the content of each page to go here */}
		<slot />
			
	</div>	

</div>
<div id="NavBarMobile">
	<NavigationBarMobile />
</div>  




<style>
@import "../styles/global.css";

#ProjectTopWrapper {	
	display: grid; 
	grid-template-columns: var(--grid-template-columns-desktop); 
	row-gap: 0.25rem;
	column-gap: 1rem;
	margin-left: var(--margin-left-dekstop);
	margin-right: var(--margin-right-desktop);

	@media (--bp-mobile) {
		grid-template-columns: var(--grid-template-columns-mobile);
		margin-left: var(--margin-left-mobile);
		margin-right: var(--margin-right-mobile);
	}

	@media (--bp-tablet){
		grid-template-columns: var(--grid-template-columns-tablet);
		margin-left: var(--margin-left-tablet);
		margin-right: var(--margin-right-tablet);
	}

	@media (--bp-desktop-wide) {
		grid-template-columns: var(--grid-template-columns-desktop-wide);
		column-gap: 4rem;
		margin-left: var(--margin-left-desktop-wide);
		margin-right: var(--margin-right-desktop-wide);
	}

}


#ProjectElementWrapper {
	display: grid; 
	grid-template-columns: 1fr; 
	align-content: start;
	grid-row-gap: 1em; 
	grid-auto-rows: auto;
	pointer-events: none;
	margin-top: var(--padding-desktop); 

	@media (--bp-mobile) {
		margin-top: var(--padding-mobile);
		grid-row-gap: 0.5em; 
	}

	@media (--bp-tablet) {
		margin-top: var(--padding-tablet);
	}

	@media (--bp-desktop-wide) {
		margin-top: var( --padding-desktop-wide);
		}
}






/* <script>
	// Define the behaviour for our new type of HTML element.
	const observer = new IntersectionObserver((entries) => {  
			entries.forEach((entry) => {
				console.log(entry)
				if (entry.isIntersecting){
					entry.target.classList.add("show");
				}
				else	{
					entry.target.classList.remove("show");
				}
	
		});
	 });
	
	const fadeElements = document.querySelectorAll(".Fade");
	fadeElements.forEach((el) => observer.observe(el));

	
</script>
	 */