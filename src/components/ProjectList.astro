---
import TopWrapper from "../layouts/TopWrapper.astro";
import BracketOpenH from "./BracketOpenH.astro";
import BracketCloseH from "./BracketCloseH.astro";
import GridLayout from "../layouts/GridLayout.astro";
import GalleryElement from "./GalleryElementV1.astro";
import { getCollection } from 'astro:content';
import { marked } from 'marked';
import ThreeImageSlide from "./ThreeImageSlide.astro";
import 'keen-slider/keen-slider.min.css';



const projects = await getCollection('projects');


// Sort
projects.sort((a, b) =>
  b.data.year.localeCompare(a.data.year)
);



---

<TopWrapper>

	<div id="list-wrapper">

    <hr />

    {projects.map((entry, index) => {

    // --- Get the image count ---
    const imageCount = entry.data.images?.length ?? 0; // Use optional chaining and nullish coalescing for safety

    // Log it for debugging (optional)
    console.log(`Project: ${entry.data.projectName}, Image Count: ${imageCount}`);

		// Optionally sanitize the project name for a valid ID
		const projectId = entry.data.projectName.replace(/\s+/g, '-').toLowerCase();
		  
		return(
		<Fragment>
			<div class:list={["ListElementWrapper"]} id={projectId}>

				<div class:list={["column1"]}>
					<div class:list={["year"]}> <p>{entry.data.year}</p> <p>{entry.data.client}</p> </div>
				</div>

				<div class:list={["column2"]}>
					<div class:list={["project-title"]}> <p>{entry.data.title}</p> </div>
				</div>

				<div class:list={["column3"]}>
					<div class:list={["role"]}> {entry.data.role}&ensp;|&ensp;{entry.data.tools}</div>
				</div>

        
				<div class:list={["column4"]}>
					&rarr;
				</div>


			<div class:list={["flip-out"]}>
				<div class:list={["project-images"]}>
					<ThreeImageSlide project={entry.data.projectName}/>
				</div>
			</div>


			</div>
			
			<hr />
		</Fragment>
	)})}

	</div>

</TopWrapper>

<script>
import KeenSlider from 'keen-slider';
import 'keen-slider/keen-slider.min.css';

// --- 2. Store slider instances for later destruction ---
let keenSlidersStore = {};

document.addEventListener('astro:page-load', () => {
  const listElements = document.querySelectorAll('.ListElementWrapper');

  listElements.forEach(listEl => {

	const flipOut = document.querySelectorAll('.flip-out');

	const sliderContainer = listEl.querySelector('.project-images');

	listEl.addEventListener('click', () => {



    // First, close all other open sliders
    listElements.forEach(el => {
      if (el !== listEl && el.classList.contains('open')) {
        // Remove the open state (this triggers the CSS transition)
        el.classList.remove('open');
      }
    });


	  // Toggle the clicked slider:
	  if (listEl.classList.contains('open')) {

		listEl.classList.remove('open');

		setTimeout(() => {
			sliderContainer.style.display = "";
		}, 500);


	  } else {

		sliderContainer.style.display = "block";

		// Otherwise, open the element
		listEl.classList.add('open');



		
		if (sliderContainer && !sliderContainer.dataset.keenSliderInitialized) {
		 
      new KeenSlider(sliderContainer, {
			loop: true,
			slides: {
			  // Default settings for larger screens
			  perView: 3,
			  spacing: 30,
			},
			breakpoints: {
			  '(max-width: 375px)': {
				slides: { perView: 1, spacing: 15 },
			  },
			  '(max-width: 650px)': {
				slides: { perView: 2, spacing: 20 },
			  },
			  '(min-width: 651px) and (max-width: 1200px)': {
				slides: { perView: 3, spacing: 30 },
			  },
			  '(min-width: 1201px)': {
				slides: { perView: 4, spacing: 30 },
			  },
			}
		  }
    );
		  sliderContainer.dataset.keenSliderInitialized = "true";
		}
	  }
	});
  });
});


// --- 4. Clean up sliders before Astro navigates away ---
document.addEventListener('astro:before-swap', () => {
  // console.log('astro:before-swap - Destroying sliders');
  Object.values(keenSlidersStore).forEach(slider => {
    if (slider && typeof slider.destroy === 'function') {
      slider.destroy();
    }
  });
  keenSlidersStore = {}; // Clear the store
});


</script>

<style>
@import "../styles/global.css";

#list-wrapper {
  display: grid;
  grid-auto-rows: min-content min-content;
  grid-column-start: 2;
  margin: 1rem 0;
  padding-left: 16px;
  align-items: center;
  margin-top: var(--padding-desktop);
  width: 100%;

  @media (--bp-mobile) {
    margin-top: var(--padding-mobile);
    padding-left: 0px;
    grid-column-start: 1;
  }
  @media (--bp-tablet) {
    margin-top: var(--padding-tablet);
  }
  @media (--bp-desktop-wide) {  
    margin-top: var(--padding-desktop-wide);
  }
}

.ListElementWrapper {
  display: grid;
  grid-template-columns: 1.5fr 2fr 1fr 48px;
  grid-template-rows: 52px auto ;
  column-gap: 16px;
  transition: all 0.5s ease; /* Default transition for opening */
  cursor: pointer;
  overflow: hidden;

  @media (--bp-mobile) {
    grid-template-columns: 5ch 1fr 0px 48px;
  }
}

/* The animated container */
.flip-out {
  margin: 0px 0px 0px 0px;
  grid-column-start: 1;
  grid-column-end: 6;
  max-height: 0;
  overflow: hidden;
  transition: all 0.5s ease;
  display: grid;
  grid-template-rows: 1fr;
}

.project-images {
  /* No display toggleâ€”its parent (.flip-out) will handle the animation */
  display: none;
}

/* When open, expand the container */
.ListElementWrapper.open .flip-out {
  margin: 8px 0px 16px 0px;
  max-height: 700px; /* Adjust as needed if your content height is known */
  margin-top: 1rem;
  margin-bottom: 1rem;
  overflow: visible;
}
/* 

/* Other styles remain unchanged */
hr {
  align-self: center;
  margin: 0;
  width: 100%;
}

p {
  margin: 0;
}

.column1 {
  grid-column-start: 1;
  font-size: 12px;
  display: grid;
  align-items: center;
}

.year {
  display: grid;
  grid-template-columns: 5ch auto 48px;
}

.year p:nth-child(2) {
  @media (--bp-mobile) {
    display: none;
  }
}


.column2 {
  grid-column-start: 2;
  align-content: center;
}

.project-title {
  font-family: PowerGrotesk-Medium;
  font-size: 21px;

  @media (--bp-mobile) {
    font-size: 19px;
  }
}

.column3 {
  grid-column-start: 3;
  font-size: 12px;
  display: grid;
  grid-template-columns: 1fr;
  align-items: center;
  justify-items: center;
}

.role {
  width: fit-content;
  @media (--bp-mobile) {
    display: none;
  }
}


.column4 {
  grid-column-start: 4;
  font-size: 22px;
  display: grid;
  grid-template-columns: 1fr;
  align-items: center;
  justify-items: center;
  transform: rotatez(0deg) ;
  transition: transform 0.25s ease-out 0.125s;

}

.ListElementWrapper.open > .column4 {
transform: rotatez(90deg) ;
}

</style>
