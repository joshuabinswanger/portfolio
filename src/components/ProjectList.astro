---
import TopWrapper from "../layouts/TopWrapper.astro";
import BracketOpenH from "./BracketOpenH.astro";
import BracketCloseH from "./BracketCloseH.astro";
import GridLayout from "../layouts/GridLayout.astro";
import GalleryElement from "./GalleryElementV1.astro";
import { getCollection } from "astro:content";
import { marked } from "marked";
import ImageSlide from "./ImageSlide.astro";
import "keen-slider/keen-slider.min.css";

const projects = await getCollection("projects");

// Sort
projects.sort((a, b) => b.data.year.localeCompare(a.data.year));

// make project keep track of its index, like this it can be used by photoswipe

let enrichedProjects = []; // Ensure initialized
let globalIndex = 0; // Ensure initialized

// Use async function if not already in Astro frontmatter
// async function processProjects() { // Uncomment if needed

for (const entry of projects) {
  console.log(`[DEBUG] Loop iteration for entry ID: ${entry.id}`); // Log start of iteration

  const projectName = entry.data.projectName;
  const startIndex = globalIndex;

  console.log(`[DEBUG]   Project Name: ${projectName}`); // Log project name

  // Fetch galleryImages
  console.log(`[DEBUG]   Fetching galleryImages...`);
  const galleryImages = await getCollection("galleryImages", ({ data }) => {
    const imageProject = data.metadata?.project;
    // Add log inside filter if needed: console.log(`[FILTER] Checking image ${data.public_id} with project ${imageProject}`);
    return imageProject && projectName.includes(imageProject);
  });
  console.log(`[DEBUG]   Fetched ${galleryImages.length} galleryImages.`); // Log image count

  const slidesCount = galleryImages.length;
  const oldGlobalIndex = globalIndex; // Log index change
  globalIndex += slidesCount + 2;
  console.log(
    `[DEBUG]   Slides count: ${slidesCount}. Global index changed from ${oldGlobalIndex} to ${globalIndex}`,
  );

  const projectData = {
    // Log object being pushed
    entry, // Maybe log just entry.id for brevity: entryId: entry.id
    projectName,
    startIndex,
    slidesCount,
  };
  console.log(`[DEBUG]   Pushing to enrichedProjects:`, {
    projectName: projectData.projectName,
    startIndex: projectData.startIndex,
    slidesCount: projectData.slidesCount,
  });
  enrichedProjects.push(projectData);
  console.log(enrichedProjects);
}

console.log(
  `[DEBUG] Loop finished. Final enrichedProjects count: ${enrichedProjects.length}`,
); // Log after loop
console.log(`[DEBUG] Final globalIndex: ${globalIndex}`);
---

<TopWrapper>
  <div id="list-wrapper">
    <hr />

    {
      enrichedProjects.map(({ entry, startIndex, slidesCount }, index) => {
        // Log it for debugging (optional)
        console.log(`Project: ${entry.data.projectName}`);

        const year = entry.data.year.slice(0, 4);

        return (
          <Fragment>
            <div
              class:list={["ListElement"]}
              id={entry.data.projectName}
              data-project-title={entry.data.title}
              data-project-credits={entry.data.credits}
            >
              <div class:list={["list-element-bar"]}>
                <div class:list={["column1"]}>
                  <div class:list={["year"]}>
                    {" "}
                    <>
                      <p>{year}</p>
                      <p>
                        {/* &mdash;&ensp; */}
                        {entry.data.client}
                      </p>
                    </>{" "}
                  </div>
                </div>

                <div class:list={["column2"]}>
                  <div class:list={["project-title"]}>
                    {" "}
                    <p>{entry.data.title}</p>{" "}
                  </div>
                </div>

                <div class:list={["column3"]}>
                  <div class:list={["role"]}>
                    {" "}
                    {entry.data.role}
                    {/* &ensp;&mdash;&ensp;{entry.data.tools} */}
                  </div>
                </div>

                <div class:list={["column4"]}>&darr;</div>
              </div>

              <div class:list={["flip-out"]}>
                <div class:list={["project-slider"]}>
                  <button class:list={["arrow-left"]}>&larr;</button>

                  <div class:list={["project-images"]}>
                    <ImageSlide
                      projectName={entry.data.projectName}
                      startIndex={startIndex}
                      slidesCount={slidesCount}
                    />
                  </div>

                  <button class:list={["arrow-right"]}>&rarr;</button>
                </div>

                <div class:list={["project-description"]}>
                  {/*   <div class:list={["title"]}>{entry.data.title} | {entry.data.subtitle}</div> */}
                  <div class:list={["description"]}>
                    <Fragment
                      set:html={marked.parse(entry.data.projectDescription)}
                    />
                  </div>
                  {/* <div class:list={["credits"]}><Fragment set:html={marked.parse(entry.data.credits)} /></div>
                   */}
                </div>
              </div>
            </div>

            <hr />
          </Fragment>
        );
      })
    }
  </div>
</TopWrapper>

<!-- Keen Slider -->
<script>
  import KeenSlider from "keen-slider";
  import "keen-slider/keen-slider.min.css";

  // --- 2. Store slider instances for later destruction ---
  let keenSlidersStore = {};

  document.addEventListener("astro:page-load", () => {
    const listElements = document.querySelectorAll(".ListElement");

    listElements.forEach((listEl) => {
      const flipOut = document.querySelectorAll(".flip-out");

      const sliderContainer = listEl.querySelector(".project-images");

      const listBar = listEl.querySelector(".list-element-bar");

      // click on bar
      listBar.addEventListener("click", () => {
        // First, close all other open sliders
        listElements.forEach((el) => {
          if (el !== listEl && el.classList.contains("open")) {
            // Remove the open state (this triggers the CSS transition)
            el.classList.remove("open");
          }
        });

        // Toggle the clicked slider:
        if (listEl.classList.contains("open")) {
          listEl.classList.remove("open");

          setTimeout(() => {
            sliderContainer.style.display = "";
          }, 500);
        } else {
          sliderContainer.style.display = "block";

          // Otherwise, open the element
          listEl.classList.add("open");

          if (
            sliderContainer &&
            !sliderContainer.dataset.keenSliderInitialized
          ) {
            var slider = new KeenSlider(sliderContainer, {
              loop: true,
              slides: { perView: 3, spacing: 50 },
              breakpoints: {
                "(max-width: 1119px)": {
                  slides: { perView: 2, spacing: 40 },
                },

                "(min-width: 1201px)": {
                  slides: { perView: 3, spacing: 80 },
                },
              },
            });

            // Add click event listeners to the arrow buttons
            const arrowLeft = listEl.querySelector(".arrow-left");
            const arrowRight = listEl.querySelector(".arrow-right");

            if (arrowLeft) {
              arrowLeft.addEventListener("click", () => {
                slider.prev();
              });
            }

            if (arrowRight) {
              arrowRight.addEventListener("click", () => {
                slider.next();
              });
            }

            sliderContainer.dataset.keenSliderInitialized = "true";
          }
        }
      });
    });
  });

  // --- 4. Clean up sliders before Astro navigates away ---
  document.addEventListener("astro:before-swap", () => {
    // console.log('astro:before-swap - Destroying sliders');
    Object.values(keenSlidersStore).forEach((slider) => {
      if (slider && typeof slider.destroy === "function") {
        slider.destroy();
      }
    });
    keenSlidersStore = {}; // Clear the store
  });
</script>

<!-- PhotoSwipe -->
<script>
  import PhotoSwipeLightbox from "photoswipe/lightbox";

  const leftArrowSVGString =
    '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 155 139" "width="39" height="35"><path d="m0 69 69 69 14-12-45-46h116V58H38l44-44L69 0 0 69Z" style="fill-rule:nonzero"/></svg>';
  const CloseSVGString =
    '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 139 139" "width="139" height="139"><path d="m69 83-56 55-13-12 56-57L0 14 13 0l56 56 56-56 13 14-55 55 55 57-13 12-56-55Z"/></svg>';

  // Declare lightbox in the outer scope so both event handlers can access it
  let lightbox = null;

  function isPhonePortrait() {
    return window.matchMedia("(max-width: 650px) and (orientation: portrait)")
      .matches;
  }

  document.addEventListener("astro:page-load", () => {
    // Select all gallery elements (each gallery container should have the class "GalleryElement")
    const projectElements = document.querySelectorAll(".ListElement");

    // Only proceed if we found gallery elements
    if (projectElements.length === 0) {
      return; // Exit early if no elements found
    }

    // Global array to hold the custom data for each gallery
    let photoswipeCustomData = [];

    //////////////////////////////////////////////////////////
    /////////////// Loop over each element ///////////////////
    //////////////////////////////////////////////////////////
    projectElements.forEach((projectEl) => {
      // Create a new array for this gallery's data items
      let galleryData = [];

      // ----- 1. Add a custom element BEFORE the image gallery: Project Name ----- //
      // Assume the gallery element stores the project title in a data attribute (for example, "data-project-title")
      const projectTitle =
        projectEl.getAttribute("data-project-title") || "Default Project Title";

      //style with title slide
      const portfolioElementNameElement = {
        html: `<div class="pswp__project-title-slide photoswipeData"><p class="pswp__project-title ">${projectTitle}</p></div>`,
      };

      galleryData.push(portfolioElementNameElement);

      // ----- 2. Add all the image elements ----- //
      // Here we assume each image link is contained in a child with class "ImageElement"
      // We use projectEl.querySelectorAll so we only search within the current gallery.

      const imageLinks = projectEl.querySelectorAll(".ImageElement a");

      imageLinks.forEach((imgLink) => {
        const photoswipeImageData = {
          src: imgLink.getAttribute("href"),
          width: imgLink.getAttribute("data-pswp-width"),
          height: imgLink.getAttribute("data-pswp-height"),
          alt: imgLink.getAttribute("data-description_text"),
          description_title: imgLink.getAttribute("data-description_title"),
          description_text: imgLink.getAttribute("data-description_text"),
          link: imgLink.getAttribute("data-link"),
        };

        galleryData.push(photoswipeImageData);
      });

      // ----- 3. Add a custom element AFTER the images: ProjectInfoSlideWrapper ----- //

      // get the description
      const ProjectInfoWrapper = projectEl.querySelector(
        ".project-description",
      );
      const projectDescription = ProjectInfoWrapper.innerHTML;

      // get the Details
      const projectCredits =
        projectEl.getAttribute("data-project-credits") || "";

      /* 		const bracketOpenV = bracketOpenVEl.innerHTML;
			const bracketCloseV = bracketCloseVEl.innerHTML; */

      const projectInfoEl = {
        html: `<div
						class="pswp__project-info-slide-wrapper photoswipeData keen-slider__slide"
						>

						<div class="pswp__project-info-slide">

							
								
							<div class="pswp__project-info">
							${projectDescription}
							</div>
							
							
							<div class="pswp__project-details">
						 ${projectCredits}

          		
						</div>
						</div>`,
      };

      galleryData.push(projectInfoEl);

      // Finally, add this gallery's data array to the global photoswipeCustomData array.
      photoswipeCustomData.push(galleryData);
    });

    const flatData = photoswipeCustomData.flat();

    const options = {
      arrowPrevSVG: leftArrowSVGString,
      arrowNextSVG: leftArrowSVGString,
      closeSVG: CloseSVGString,

      dataSource: flatData,

      initialZoomLevel: `fit`,
      bgOpacity: 0.95,
      zoom: false,

      // to apply styles just to this instance of PhotoSwipe
      mainClass: "pswp--custom-bg pswp--custom-icon-colors",

      paddingFn: () => {
        if (isPhonePortrait()) {
          return { top: 0, bottom: 0, left: 10, right: 10 };
        } else {
          return { top: 20, bottom: 40, left: 100, right: 100 };
        }
      },

      showHideAnimationType: "fade",

      pswpModule: () => import("photoswipe"), // Import the PhotoSwipe module dynamically
    };

    // Destroy any existing lightbox before creating a new one
    if (lightbox) {
      lightbox.destroy();
      lightbox = null;
    }

    lightbox = new PhotoSwipeLightbox(options);

    lightbox.on("uiRegister", function () {
      lightbox.pswp.ui.registerElement({
        name: "custom-caption",
        order: 9,
        isButton: false,
        appendTo: "wrapper",
        html: "Caption text",
        onInit: (el, pswp) => {
          lightbox.pswp.on("change", () => {
            // Check if currSlide exists before accessing its properties
            if (!pswp.currSlide || !pswp.currSlide.data) {
              el.innerHTML = "";
              return;
            }

            // Retrieve the DOM element attached to the current slide
            const currSlide = pswp.currSlide.data;
            let captionHTML = "";

            if (currSlide) {
              const description_title = currSlide.description_title;
              const description_text = currSlide.description_text;
              const link = currSlide.link;

              if (description_title && link) {
                captionHTML = `
                                <p><strong>${description_title}</strong></p>
                                <p>${description_text}</p>
                                <p><a href="${link}">External Link</a></p>
                                `;
              } else if (description_title) {
                captionHTML = `
                                <p><strong>${description_title}</strong></p>
                                <p>${description_text}</p>
                                `;
              }
            }

            el.innerHTML = captionHTML || "";
          });
        },
      });
    });

    lightbox.init(); // Initialize the lightbox

    window.pswpLightbox = lightbox;
  });
</script>

<style>
  @import "../styles/global.css";

  #list-wrapper {
    display: grid;
    grid-auto-rows: min-content min-content;
    grid-column-start: 2;
    margin: 1rem 0;
    align-items: center;
    margin-top: var(--padding-desktop);
    width: 100%;

    @media (--bp-mobile) {
      margin-top: var(--padding-mobile);
      padding-left: 0px;
      grid-column-start: 1;
    }
    @media (--bp-tablet) {
      margin-top: var(--padding-tablet);
    }
    @media (--bp-desktop-wide) {
      margin-top: var(--padding-desktop-wide);
    }
  }

  .ListElement {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 52px auto;
    transition: all 0.5s ease; /* Default transition for opening */
    cursor: pointer;
    overflow: hidden;
  }

  .list-element-bar {
    display: grid;
    grid-template-columns: 1.5fr 2fr 1fr 48px;
    column-gap: 16px;

    @media (--bp-mobile) {
      grid-template-columns: 9ch 1fr 0px 48px;
    }
  }

  /* The animated container */
  .flip-out {
    margin: 0px 0px 0px 0px;
    grid-column-start: 1;
    grid-column-end: 6;
    max-height: 0;
    overflow: hidden;
    transition: all 0.5s ease;
    display: grid;
    grid-template-rows: min-content min-content;
    grid-template-columns: 1fr 1fr 1fr;
  }

  .project-slider {
    margin: 0px 0px 0px 0px;
    grid-row-start: 1;
    grid-column-start: 1;
    grid-column-end: 4;
    overflow: hidden;
    transition: all 0.5s ease;
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 40px 1fr 40px;
  }

  .project-description {
    display: grid;
    justify-content: center;
    padding: 40px;
    margin-top: 16px;
    grid-row-start: 2;
    grid-column-start: 1;
    grid-column-end: 4;
    grid-template-rows: min-content min-content;
    column-gap: 80px;
    grid-template-columns: 660px 1fr;

    @media (--bp-mobile) {
      grid-template-columns: 1fr;
    }
  }

  .title {
    grid-row-start: 1;
    grid-column-start: 1;
  }

  .subtitle {
    grid-row-start: 1;
    grid-column-start: 1;
  }

  .description {
    grid-row-start: 1;
    grid-column-start: 1;
  }

  .credits {
    grid-row-start: 2;
    grid-column-start: 1;
    align-items: start;
  }

  table tbody td {
    /* Align the content vertically to the top */
    vertical-align: top;
    /* Add some padding for better spacing */
    padding: 5px;
  }

  /* Optional: Add padding to table header cells as well */
  table th {
    padding: 5px;
    text-align: left; /* Align header text to the left */
    vertical-align: top; /* Also align header text to the top */
  }

  /* Optional: Style for the table itself */
  table {
    border-collapse: collapse; /* Collapse borders if you have them */
    width: 100%; /* Make table take full width */
  }

  .arrow-left,
  .arrow-right {
    all: unset;
    font-size: 22px;
    height: 40px;
    text-justify: center;
    text-align: center;
    background-color: #fbf9f44c;
    width: stretch;
    cursor: pointer;
    z-index: 1011;
    align-self: center;
  }

  .arrow-left {
    grid-row-start: 1;
    grid-column-start: 1;
  }

  .arrow-right {
    grid-row-start: 1;
    grid-column-start: 3;
    justify-self: flex-end;
  }

  .project-images {
    /* No display toggle—its parent (.flip-out) will handle the animation */
    display: none;
    grid-row-start: 1;
    grid-column-start: 2;
    grid-column-end: 3;
    overflow-x: hidden;
  }

  /* When open, expand the container */
  .ListElement.open .flip-out {
    display: grid;
    margin: 8px 0px 16px 0px;
    max-height: 800px; /* Adjust as needed if your content height is known */
    margin-top: 1rem;
    margin-bottom: 1rem;
    overflow: visible;
  }
  /* 

/* Other styles remain unchanged */
  hr {
    align-self: center;
    margin: 0;
    width: 100%;
  }

  p {
    margin: 0;
  }

  .column1 {
    grid-column-start: 1;
    font-size: 12px;
    display: grid;
    align-items: center;
  }

  .year {
    display: grid;
    grid-template-columns: 40px 1fr;
  }

  .year p:nth-child(1) {
    font-family: PowerGrotesk-Medium;
  }

  .year p:nth-child(2) {
    @media (--bp-mobile) {
      display: none;
    }
  }

  .column2 {
    grid-column-start: 2;
    align-content: center;
    align-items: center;
    align-self: center;
  }

  .project-title {
    font-family: PowerGrotesk-Medium;
    font-size: 21px;

    @media (--bp-mobile) {
      font-size: 19px;
    }
  }

  .column3 {
    grid-column-start: 3;
    font-size: 12px;
    display: grid;
    grid-template-columns: 1fr;
    align-items: center;
    justify-items: end;
  }

  .role {
    width: fit-content;
    @media (--bp-mobile) {
      display: none;
    }
  }

  .column4 {
    grid-column-start: 4;
    font-size: 22px;
    display: grid;
    grid-template-columns: 1fr;
    align-items: center;
    justify-items: center;
    transform: rotatez(0deg);
    transition: transform 0.25s ease-out 0.125s;
  }

  .ListElement.open > .list-element-bar > .column4 {
    transform: rotatez(180deg);
  }
</style>
