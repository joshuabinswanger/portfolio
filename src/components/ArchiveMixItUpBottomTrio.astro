---
import BracketOpenH from "./BracketOpenH.astro";
import BracketMiddleH from "./BracketMiddleH.astro";
import BracketCloseH from "./BracketCloseH.astro";
import TopWrapper from "../layouts/TopWrapper.astro";
import GridLayout from "../layouts/GridLayout.astro";
import ArchiveElement from "./ArchiveElementMixItUp.astro";
import { getCollection } from "astro:content";

// Filter the collection to include only items with metadata.archive === "include"
const archiveImages = await getCollection('galleryImages', ({ data }) => {
  return data.metadata?.archive === "include";
});



//////////////////
///// TAGS ///////
//////////////////


// Helper function to ensure we get an array from any input
function ensureArray(value) {
  if (!value) return [];
  if (Array.isArray(value)) return value;
  return value.split(',').map(item => item.trim()); // Split by comma and trim spaces
}



//// Role /////

/// extract role tags
const role = Array.from(
  new Set(archiveImages.flatMap((image) => ensureArray(image.data.metadata?.role) || []))
);

console.log("Role Array:", role); // Log the array to the console

//Filter the tags so only those in `AllowedList` remain
const roleAllowedList = ["2D", "3D", "Dev"];
const roleListLength = roleAllowedList.length;
const roleListLengthString = roleListLength.toString();

const roleAllowed = role.filter(tag => roleAllowedList.includes(tag));

//covnert to CSS conform tags
const roleConversionCSS = {
  "2D": "twoD",
  "3D": "threeD"
};

const roleConversionName = {
  "Dev": "Tech",
};


const roleConvertedCSS = roleAllowed.map(tag => roleConversionCSS[tag] || tag);
const roleConvertedName = roleAllowed.map(tag => roleConversionName[tag] || tag);


//// PROGRAM /////

/// extract role tags
const program = Array.from(
  new Set(archiveImages.flatMap((image) => ensureArray(image.data.metadata?.program) || []))
);

console.log("Program Array:", program); // Log the array to the console

//Filter the tags so only those in `AllowedList` remain
const programAllowedList = ["Houdini", "Blender", "ZBrush", "Rive", "SubstancePainter"];
const programListLength = programAllowedList.length;
const programListLengthString = programListLength.toString();

const programAllowed = program.filter(tag => programAllowedList.includes(tag));

//covnert to CSS conform tags
const programConversionCSS = {
};

const programConversionName = {
  "SubstancePainter" : "Substance Painter"
};


const programConvertedCSS = programAllowed.map(tag => programConversionCSS[tag] || tag);
const programConvertedName= programAllowed.map(tag => programConversionName[tag] || tag);





//// TOPIC /////

/// extract role tags
const topic = Array.from(
  new Set(archiveImages.flatMap((image) => ensureArray(image.data.metadata?.topic) || []))
);

console.log("Topic Array:", topic); // Log the array to the console

//Filter the tags so only those in `AllowedList` remain
const topicAllowedList = ['Poster', 'Tutorial', 'SciCom', 'MoGraph', 'Real-time', 'Wood', 'Character', 'Proceduralism', 'Creature'];
const topicListLength = topicAllowedList.length;
const topicListLengthString = topicListLength.toString();

const topicAllowed = topic.filter(tag => topicAllowedList.includes(tag));

//covnert to CSS conform tags
const topicConversionCSS = {
};
const topicConversionName = {
  "MoGraph" : "Motion",
  "SciCom" : "Science",
  "Proceduralism" : "Procedural" 
};

const topicConvertedCSS = topicAllowed.map(tag => topicConversionCSS[tag] || tag);
const topicConvertedName = topicAllowed.map(tag => topicConversionName[tag] || tag);


---

<TopWrapper>
  <div class:list={["ArchiveWrapper"]} id="ArchiveWrapper">
  <!-- Filter Buttons-->
  <form id="filter-top-wrapper" >


    <!-- Filter Sort -->
    <fieldset class:list={[`filters-button-group`]} id="sort-wrapper">
      <button type="button" class:list={["filter-button mixitup-control-active"]} id="sort-button" >Sort</button>
    </fieldset>
    
    
     <!-- Filter Reset -->
    <fieldset class:list={[`filters-button-group`]} id="filter-reset-wrapper">
      <button type="reset" class:list={["filter-button"]} id="filter-reset-all" >Filter</button>
    </fieldset>


  <!-- Filter Buttosn in a Group  --> 

    <div id="filter-button-group-wrapper">
      <!-- Role -->
      <fieldset class:list={[`filters-button-group`]} id="role-buttons-wrapper" data-filter-group="role">
        <BracketOpenH />

                <!--       <button  type="button" class:list={["filter-button reset-sub-filter"]} data-toggle={roleConvertedCSS.map(tag => `.${tag}`).join(', ')} >Art</button> -->
          {roleConvertedCSS.map((tag, index) => (
            <button  type="button" class:list={[`filter-button ${tag}`]}  data-toggle={`.${tag}`}>
                {roleConvertedName[index]}
            </button>
          ))}

          <BracketCloseH />
        </fieldset>

      <!-- Program -->
      <fieldset class:list={[`filters-button-group`]} id="program-buttons-wrapper" data-filter-group="program">
        <BracketOpenH />

          <!-- <button  type="button" class="filter-button reset-sub-filter"  id="reset-filter-program" data-toggle={programConvertedCSS.map(tag => `.${tag}`).join(', ')} >Tool</button> -->
          {programConvertedCSS.map((tag, index) => (
            <button  type="button" class:list={[`filter-button ${tag}`]}  data-toggle={`.${tag}`}>
                {programConvertedName[index]}

            </button>
          ))}
          <BracketCloseH />
        </fieldset>

        <!-- Topic -->
        <fieldset class:list={[`filters-button-group`]} id="topic-buttons-wrapper" data-filter-group="topic">
          <BracketOpenH />

                <!--       <button  type="button" class="filter-button reset-sub-filter" data-toggle={topicConvertedCSS.map(tag => `.${tag}`).join(', ')} >Topic</button> -->
          {topicConvertedCSS.map((tag, index) => (
            <button type="button"class:list={[`filter-button ${tag}`]}  data-toggle={`.${tag}`}>
                {topicConvertedName[index]}

            </button>
          ))}
          <BracketCloseH />
        </fieldset>

  </div>

  </form>

    <div class:list={["container"]} id="Archive">
        {archiveImages.map((image, index) => (
      
                <ArchiveElement
                    public_id={image.data.public_id} // Ensure `public_id` exists
                    index={index}
                />

        ))}
    </div>
  </div>
 
</TopWrapper>

<!-- MixItUp -->
<script>
import { deselectScripts } from 'astro/virtual-modules/transitions-swap-functions.js';
import { use } from 'marked';
import mixitup from 'mixitup';
import mixitupMultifilter from 'mixitup-multifilter';
import PhotoSwipeLightbox from 'photoswipe/lightbox';




function getFreshElements() {
  const roleFilterButton = document.querySelector("#role-buttons-wrapper button"); 
  const roleDataFilterValue = roleFilterButton.getAttribute("data-filter");

  console.log(`roleFilterValue:${roleDataFilterValue}`)

  const programFilterButton = document.querySelector("#program-buttons-wrapper button"); 
  const programDataFilterValue = programFilterButton.getAttribute("data-filter");

  console.log(`programFilterValue:${programDataFilterValue}`)

  const topicFilterButton = document.querySelector("#topic-buttons-wrapper button"); 
  const topicDataFilterValue = topicFilterButton.getAttribute("data-filter");

  console.log(`topicFilterValue:${topicDataFilterValue}`)


  return {
    mix: document.querySelector('.container'),
    filterButtons: document.querySelectorAll('.filter-button'),
    containerEl: document.querySelector('.ArchiveWrapper'),
    filterTopWrapperElement: document.querySelector('#filter-top-wrapper'),
    resetFilterProgram: document.querySelectorAll('.reset-sub-filter'),
    roleFilterButton: roleFilterButton,
    programFilterButton: programFilterButton,
    topicFilterButton: topicFilterButton,
    roleDataFilterValue: roleDataFilterValue,
    programDataFilterValue: programDataFilterValue,
    topicDataFilterValue: topicDataFilterValue

  };
}


  ////////////////////
  ////Filter Width///
  ////////////////////

  function updateFilterButtonWidth() {
    // get elements
    const { mix, filterTopWrapperElement } = getFreshElements();

    // Calculate the archive width
    const archiveWidth = mix.offsetWidth;

    // Set the --archive-width CSS variable dynamically
    filterTopWrapperElement.style.setProperty('--archive-width', `${archiveWidth}px`);
    
    console.log(`${archiveWidth}px`);
    
  }



  /////////////////////
  ///////MixItUp//////
  /////////////////////

  let mixer = undefined;



  ////////////////////////////////////////////////////////////
  ///////////////     PHOTOSWIPE ////////////////////////////
  ///////////////////////////////////////////////////////////
    
  
  // Create an array to hold the image data for PhotoSwipe
  let imageDataSource = [];

  let imageElements = document.querySelectorAll('.photo-link');

  // SVG strings for the arrow and close icons
    const leftArrowSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 155 139" width="39" height="35"><path d="m0 69 69 69 14-12-45-46h116V58H38l44-44L69 0 0 69Z" style="fill-rule:nonzero"/></svg>';
  const CloseSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 139 139" width="139" height="139"><path d="m69 83-56 55-13-12 56-57L0 14 13 0l56 56 56-56 13 14-55 55 55 57-13 12-56-55Z"/></svg>';

  // Utility function to detect phone portrait mode
  function isPhonePortrait() {
    return window.matchMedia('(max-width: 650px) and (orientation: portrait)').matches;
  }

  // Declare lightbox variable in an outer scope so that it's accessible in multiple event listeners
    let lightbox = null;




  document.addEventListener("astro:page-load", () => {

    /////////////////////
    ///////MixItUp//////
    /////////////////////
    updateFilterButtonWidth();
    window.addEventListener('resize', updateFilterButtonWidth);



    console.log("Event: astro:page-load");
    const { containerEl, roleFilterButton,programFilterButton, topicFilterButton, roleDataFilterValue, programDataFilterValue, topicDataFilterValue } = getFreshElements();

    console.log("Creating mixer");
    mixitup.use(mixitupMultifilter);

    mixer = mixitup(containerEl, {
      selectors: {
          target: '.mix'
      },
      animation: {
          enable: false,
      },
      multifilter: {
          enable: true // enable the multifilter extension for the mixer
      },
      debug: {
          enable: true
      },

      load: {
        sort: 'random',
        
      },

      callbacks: {
        onMixStart: function(futureState) {
            console.log(futureState.activeFilter.selector);
        },
        onMixEnd: function(state) {

          createPhotoSwipeDataSource();
           
          console.log(state.activeFilter.selector);

            // If the active filter is the default (e.g. '*'), we consider it "not filtered"
            if (state.activeFilter.selector === '.mix') {
                filterButton.textContent = 'Filter';
                filterButton.classList.remove('filter-reset-all-active');
            } else {
                // Anything else means a specific filter is active
                filterButton.textContent = 'Reset';
                filterButton.classList.add('filter-reset-all-active');
            }
        },
      }
    });

    createPhotoSwipeDataSource();

    mixer.configure({
    animation: {
        enable: true,
        duration: 300
    }});
    
    let resetButton = document.querySelector(`#filter-reset-all`);
    resetButton.addEventListener(`click`, () => {
      mixer.show();
    });


    //////////////////
    /////Sorting//////
    /////////////////

    let sortButton = document.querySelector(`#sort-button`);
    let clicks = 0;

    // Construct object for setting sorting types in MixItUp
    let sortingTypes = {
      Random: 'random',
      Project: 'project:desc',
    };

    // Convert object keys and values into arrays
    let sortingKeys = Object.keys(sortingTypes);
    let sortingValues = Object.values(sortingTypes);

    function onClick() {
      clicks = (clicks + 1) % sortingKeys.length; // Loop through keys cyclically
      let currentKey = sortingKeys[clicks]; // Get the key
      let currentValue = sortingValues[clicks]; // Get the value (sorting string)

      // Update button text to show the current sorting type name
      sortButton.innerHTML = `${currentKey}`;

      // Call MixItUp sorting with the correct value
      mixer.sort(currentValue);
  /*     console.log(currentValue); */

      //scroll to top
      window.scrollTo({
        top: 0,
        behavior: "smooth",
      });
    }

    // Add event listener correctly
    sortButton.addEventListener(`click`, onClick);



    let filterButton = document.querySelector("#filter-reset-all");

    filterButton.addEventListener("mousedown", function() {
      filterButton.textContent = "Reset";
    });

    filterButton.addEventListener("mouseup", function() {
      filterButton.textContent = "Filter";
    });




    ////////////////////////////////////////////////////////////
    ///////////////     PHOTOSWIPE ////////////////////////////
    ///////////////////////////////////////////////////////////


    // Function to build the image data source array by reading attributes from each .photo-link element
    function createPhotoSwipeDataSource() {

      imageDataSource.length = 0;
 
      
      // Select all .photo-link elements and convert NodeList to an array
      const allLinks = Array.from(document.querySelectorAll('.photo-link'));
      
      // Filter out only the visible links (an element is visible if its offsetParent is not null)
      const dataSources = allLinks.filter(link => link.offsetParent !== null);

      // Attach a click event listener to each photo-link element.
      // The index of the clicked element is used to open the corresponding slide.
      dataSources.forEach((link, index) => {
        link.addEventListener('click', (e) => {
          e.preventDefault(); // Prevent the default link behavior
          lightbox.loadAndOpen(index);
        });
      });


      dataSources.forEach(link => {
        const img = link.querySelector('img'); // Find the nested img element

        // Extract attributes from the img and link elements
    /*         const srcset = img.getAttribute('srcset'); */
        const src = link.getAttribute('href');
        const width = link.getAttribute('data-pswp-width');
        const height = link.getAttribute('data-pswp-height');
        const alt = img.getAttribute('alt');
        const description_title = link.getAttribute('data-description_title');
        const description_text = link.getAttribute('data-description_text');

        // Push an object with the extracted data into the imageDataSource array
        imageDataSource.push({
    /*           srcset: srcset, */
          src: src,
          width: parseInt(width, 10),
          height: parseInt(height, 10),
          alt: alt,
          description_title: description_title,
          description_text: description_text
        });
      });
 /*      console.log(imageDataSource); */

    }




    // If the lightbox is not yet initialized, create it
    if (!lightbox) {
      // Assign to the outer scoped variable (do not use "const" here)
      lightbox = new PhotoSwipeLightbox({
        dataSource: imageDataSource,
        arrowPrevSVG: leftArrowSVGString,
        arrowNextSVG: leftArrowSVGString,
        closeSVG: CloseSVGString,
        initialZoomLevel: `fit`,
        bgOpacity: 0.95,
        zoom: false,
        mainClass: 'pswp--custom-bg pswp--custom-icon-colors',
        paddingFn: () => {
          return isPhonePortrait()
            ? { top: 0, bottom: 0, left: 10, right: 10 }
            : { top: 20, bottom: 40, left: 100, right: 100 };
        },
        showHideAnimationType: 'fade',
        pswpModule: () => import('photoswipe'),
      });

      // Initialize the PhotoSwipe lightbox
      lightbox.init();

      // Register a custom caption element
      lightbox.on('uiRegister', function () {
        lightbox.pswp.ui.registerElement({
          name: 'custom-caption',
          order: 9,
          isButton: false,
          appendTo: 'wrapper',
          html: '',
          onInit: (el, pswp) => {
            lightbox.pswp.on('change', () => {
              const currSlideElement = lightbox.pswp.currSlide?.data?.element;
              let captionHTML = '';
              if (currSlideElement) {
                const description_title = currSlideElement.getAttribute('data-description_title');
                const description_text = currSlideElement.getAttribute('data-description_text');
                if (description_title) {
                  captionHTML = `<p><strong>${description_title}</strong></p><p>${description_text}</p>`;
                }
              }
              el.innerHTML = captionHTML || '';
            });
          },
        });
      });




    }
  })



  document.addEventListener("astro:before-swap", () => {

    /////////////////////
    ///////MixItUp//////
    /////////////////////

    
    console.log("Destroying mixer");
    
    window.removeEventListener('resize', updateFilterButtonWidth);
    
    mixer?.destroy();
    mixer = undefined;

    ////////////////////////////////////////////////////////////
    ///////////////     PHOTOSWIPE ////////////////////////////
    ///////////////////////////////////////////////////////////


    if (lightbox) {
      lightbox.destroy();
      lightbox = null;
    };
    
   
  });







</script>


<!-- PhotoSwipe -->
<script>
 



  // Before swapping Astro pages, destroy the lightbox if it exists
  document.addEventListener('astro:before-swap', () => {
    if (lightbox) {
      lightbox.destroy();
      lightbox = null;
    }
  });
</script>

<style define:vars={{ roleListLengthString, programListLengthString, topicListLengthString }}>

@import "../styles/global.css";



#ArchiveWrapper {
  display: grid;
  grid-template-rows: min-content 1fr;
  padding-bottom: 11rem;


}

#Archive {
  padding-top: calc(var(--padding-desktop) + 6rem);

  @media (--bp-mobile) {
		padding-top: 6rem; 
	}

  @media (--bp-tablet) {

    padding-top: calc(var(--padding-desktop) + 5rem);


  }

  @media (--bp-desktop-wide) {

    padding-top: calc(var(--padding-desktop) + 7rem);


  }

}

.container {
  display: grid;
  grid-template-columns: repeat(5, 13%);
  grid-row-gap: 5rem;
  grid-auto-rows: auto;
  justify-content: space-evenly;


  @media (--bp-mobile) {
    grid-template-columns: 40% 40%;
    grid-row-gap: 5rem;
	}

	@media (--bp-tablet) {

    grid-template-columns: repeat(3, 20%);
    grid-row-gap: 5rem;

	}

	@media (--bp-desktop-wide) {
    grid-template-columns: repeat(7, 10%);
	 
	}
}


#filter-top-wrapper {
  display: grid;
  position: fixed;
  z-index: 2;
  grid-template-columns: 9ch 1fr;
  grid-template-rows: min-content min-content;
  padding-top: var(--padding-desktop);
  row-gap: 0.25rem;
  --archive-width: 100%;
  width: var(--archive-width);
  column-gap: 1rem;
  overflow: visible;
  background-color: var(--bg-color);
  
  @media (--bp-mobile) {
    display: grid;
    /* padding bot plus height */
    bottom: calc(3rem);
    padding: 1px;
    padding-bottom: 0.7rem;
    left: 0px;
    grid-template-columns: 7ch 7ch auto;
    grid-template-rows: auto;
    column-gap: 0.2rem;
    width: calc(100vw - var(--scrollbar-width) - 6px);
    overflow-y: hidden;
    overflow-x: hidden;
    
  }

	@media (--bp-tablet) {

		padding-top: var(--padding-tablet); 

	}

	@media (--bp-desktop-wide) {

		padding-top: var(--padding-desktop-wide);

	 
	}
}

#filter-button-group-wrapper {
  display: grid; /* Keeps the grid layout */
  grid-template-columns: auto;
  grid-template-rows: min-content min-content;
  row-gap: 0.25rem;
  grid-row-start: 1;
  grid-row-end: 3;
  grid-column-start: 2;


  @media (--bp-mobile) {
    font-size: var(--font-size-mobile-small);
    margin: 0;
    overflow-x: scroll;
    grid-column-start: 3;
  }
}

.filters-button-group {
  display: grid; /* Keeps the grid layout */
  grid-row-start: 1;
  column-gap: 0rem;
  z-index: 2;
  border: none; /* Remove the default fieldset border */
  margin: 0; /* Remove default margin */
  padding: 1px; /* Remove default padding */

  @media (--bp-mobile) {
    font-size: var(--font-size-mobile-small);
    margin: 0;
  }
}

fieldset {
  border: none; /* Ensure fieldset behaves like a div */
  margin: 0;
  padding: 0;
}



#filter-reset-wrapper {
  grid-column-start: 1;
  grid-row-start: 2;
  grid-row-end: 3;

  @media (--bp-mobile) {
    grid-column-start: 2;
    grid-row-start: 1;
  }
}

#filter-reset-all {
  color: var(--bg-color);
  background-color: black;
}

#filter-reset-all.filter-reset-all-active {
  background-color: var(--bg-color-accent); /* Example: Change background color */
  color: rgb(0, 0, 0); /* Change text color */
  border: solid;
  border-width: 1px;
}

#sort-wrapper {
  grid-column-start: 1;
  grid-row-start: 1;
  grid-row-end: 2;

  @media (--bp-mobile) {
    grid-column-start: 1;
    grid-row-start: 1;
  }
}



#role-buttons-wrapper {
  grid-column-start: 1;
  grid-template-columns: 0 repeat(var(--roleListLengthString), 1fr) 0;

  
  @media (--bp-mobile) {
    grid-column-start: 3;
  }

}

#program-buttons-wrapper {
  grid-column-start: 2;
  grid-column-end: 4;
  grid-template-columns: 0 repeat(var(--programListLengthString), 1fr) 0;

  @media (--bp-mobile) {
    grid-column-start: 4;
  }

    
}  

#topic-buttons-wrapper {
  grid-column-start: 1;
  grid-column-end: 4;
  grid-row-start: 2;
  grid-template-columns: 0 repeat(var(--topicListLengthString), 1fr) 0;

  @media (--bp-mobile) {
    grid-column-start: 5;
    grid-column-end: 6;
    grid-row-start: 1;
  }

}

.filter-button {
  font-family: PowerGrotesk-Light;
  color: black;
  font-size: 11px;
  letter-spacing: 0.6px;
  border: 0px;
  background-color: transparent;
  padding: 0 0.7rem;
  height: 1.25rem;

  
  @media (--bp-mobile) {
    height: 2rem;
  }

  @media (--bp-tablet) {

    height: 1rem;

  }
}

.filter-button.mixitup-control-active {
  color: var(--bg-color);
  background-color: black;
}





</style>