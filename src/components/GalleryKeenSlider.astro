---
import TopWrapper from "../layouts/TopWrapper.astro";
import GridLayout from "../layouts/GridLayout.astro";
import GalleryElement from "./GalleryElementKeenSliderCloudinary.astro";
import { getCollection } from 'astro:content';

const galleryProjects = await getCollection('gallery');

// Sort galleryProjects by projectName
galleryProjects.sort((a, b) => a.data.projectName.localeCompare(b.data.projectName));

// Log the filtered results
galleryProjects.forEach((entry) => {
	const project = entry.data.projectName;
  	console.log(`${project}`); // Should only log entries matching the target project
});

const {projectName} = Astro.props;
---

<TopWrapper>
  <GridLayout>
	
    {galleryProjects.map((entry, index) => {

		 // Optionally sanitize the project name for a valid ID
		 const projectId = entry.data.projectName.replace(/\s+/g, '-').toLowerCase();
		  
		if (index > 2) {
			
		return(
		<div class:list={["observer restrain"]}>
			<div class:list={["GalleryElementWrapper hidden"]} id={projectId}>
				<GalleryElement
				project={entry.data.projectName}
				
				/>
			</div>
		</div>
		);
	
		}  else {
		return(
		<div class:list={["observer restrain"]}>
			<div class:list={["GalleryElementWrapper"]} id={projectId}>
				<GalleryElement
				project={entry.data.projectName}
				
				/>
			</div>
		</div>
		);
	}
	})}
  </GridLayout>
</TopWrapper>


<script>

document.addEventListener('astro:page-load', ev => {


// Select all ImageElement components
const imageElements = document.querySelectorAll('.GalleryElementWrapper');

// Loop through the ImageElement NodeList and start adding the fade class from the 3rd element onwards
imageElements.forEach((image, index) => {
	if (index >= 2) { // index starts from 0, so 2 is the 3rd element
		image.classList.add('fade');
	}
	}
); 

 // IntersectionObserver options
	let optionsFade = {
			rootMargin: "150px 0px -200px 0px",
		};
	
	// Define the IntersectionObserver
	const observerFade = new IntersectionObserver((entries) => {  
		entries.forEach((entry) => {
			console.log(entry);
			if (entry.isIntersecting) {
				entry.target.firstElementChild.classList.add("show");
				entry.target.classList.remove("restrain");
			} else {
				entry.target.firstElementChild.classList.remove("show");
			}
		});
	}, optionsFade);

	 // IntersectionObserver hidden options
	 let optionsHidden = {
			rootMargin: "700px",
		};
	
	// Define the IntersectionObserver
	const observerHidden = new IntersectionObserver((entries) => {  
		entries.forEach((entry) => {
			console.log(entry);
			if (entry.isIntersecting) {
				entry.target.firstElementChild.classList.remove("hidden");
			} 
		});
	}, optionsHidden);






     // Select elements to observe and start observing them
     const fadeElements = document.querySelectorAll(".observer");
     fadeElements.forEach((el) => observerFade.observe(el));

	 const hiddenElements = document.querySelectorAll(".observer");
	 hiddenElements.forEach((el) => observerHidden.observe(el));



  });
</script>




<style>
@import "../styles/global.css";

.GalleryElementWrapper {
	scroll-margin-top: var(--padding-desktop);
	
	@media (--bp-mobile) {
		scroll-margin-top: var(--padding-mobile);
	}

	@media (--bp-tablet) {
		scroll-margin-top: var(--padding-tablet);
	}

	@media (--bp-desktop-wide) {	
		scroll-margin-top: var(--padding-desktop-wide);
	}
}
/*Fade */
.observer {
	display: grid;
	height: fit-content;
}
.restrain {
	opacity: 0.1;
	overflow: hidden;
	height: 70vh;
	width: 25vw;
}
.fade{
  opacity: 0.22;
  filter: contrast(0.66) sepia(.8) blur(5px) grayscale(0.8);
  transition: all 1s ease;
  transform: translateY(10%);
}

.show {
  opacity: 1;
  filter:  contrast(1) brightness(1) sepia(0) blur(0px) grayscale(0);
  transform: translateY(0);
}

.hidden {
	display: none;
}



.observer:nth-of-type(1) {
	grid-column-start: 1; 
	grid-column-end: span 8; 
	grid-row-start: 1;
	
}

	
.observer:nth-of-type(2) {
	grid-column-start: 11; 
	grid-column-end: span 6; 
	grid-row-start: 7;

}

.observer:nth-of-type(3) {
	grid-column-start: 2;
	grid-column-end: span 7; 
	grid-row-start: 11;
	
}
.observer:nth-of-type(4) {
	grid-column-start: 11;
	grid-column-end: span 7; 
	grid-row-start: 17;

}
.observer:nth-of-type(5) {
	grid-column-start: 1;
		grid-column-end: span 7; 
		grid-row-start: 21;

}
.observer:nth-of-type(6) {
	grid-column-start: 10; 
	grid-column-end: span 7; 
	grid-row-start: 27;

}
.observer:nth-of-type(7) {
	grid-column-start: 3; 
	grid-column-end: span 5; 
	grid-row-start: 32

}
.observer:nth-of-type(8) {
	grid-column-start: 8; 
	grid-column-end: span 9; 
	grid-row-start: 45;

	
}
.observer:nth-of-type(9) {
	grid-column-start: 2; 
	grid-column-end: span 5; 
	grid-row-start: 55;

}
.observer:nth-of-type(10) {
	grid-column-start: 12; 
	grid-column-end: span 6; 
	grid-row-start: 53;

}
.observer:nth-of-type(11) {
	grid-column-start: 12; 
	grid-column-end: span 6; 
	grid-row-start: 60;
}
.observer:nth-of-type(12) {
	grid-column-start: 12; 
	grid-column-end: span 6; 
	grid-row-start: 66;
}
.observer:nth-of-type(13) {
	grid-column-start: 12; 
	grid-column-end: span 6; 
	grid-row-start: 71;

}
.observer:nth-of-type(14) {
	grid-column-start: 12; 
	grid-column-end: span 6; 
	grid-row-start: 77;

}
.observer:nth-of-type(15) {
	grid-column-start: 12; 
	grid-column-end: span 6; 
	grid-row-start: 81;
}
.observer:nth-of-type(16) {
	grid-column-start: 12; 
	grid-column-end: span 6; 
	grid-row-start: 86;
}
.observer:nth-of-type(17) {
	grid-column-start: 12; 
	grid-column-end: span 6; 
	grid-row-start: 92;
}



@media (--bp-mobile) {

	.observer:nth-of-type(odd) {
		grid-column-start: 1; 
		grid-column-end: 6; 
	}

	.observer:nth-of-type(even) {
		grid-column-start: 1; 
		grid-column-end: 7; 
	}

	.observer {
		margin-bottom: 5rem;
	}

}

@media (--bp-tablet) {

.observer:nth-of-type(1) {
	grid-column-start: 1; 
	grid-column-end: span 5; 
}

.observer:nth-of-type(2) {
	grid-column-start: 3; 
	grid-column-end: span 5; 
}

.observer:nth-of-type(3) {
	grid-column-start: 2; 
	grid-column-end: span 5; 
}

.observer:nth-of-type(4) {
	grid-column-start: 1; 
	grid-column-end: span 5; 
}

.observer:nth-of-type(5) {
	grid-column-start: 2; 
	grid-column-end: span 5; 
}

.observer:nth-of-type(6) {
	grid-column-start: 3; 
	grid-column-end: span 5; 
}

.observer:nth-of-type(7) {
	grid-column-start: 1; 
	grid-column-end: span 5; 
}

.observer:nth-of-type(8) {
	grid-column-start: 2; 
	grid-column-end: span 5; 
}

.observer:nth-of-type(9) {
	grid-column-start: 3; 
	grid-column-end: span 5; 
}
.observer:nth-of-type(10) {
	grid-column-start: 1; 
	grid-column-end: span 5; 
}
.observer:nth-of-type(11) {
	grid-column-start: 2; 
	grid-column-end: span 5; 
}
.observer:nth-of-type(12) {
	grid-column-start: 3; 
	grid-column-end: span 5; 
}
.observer:nth-of-type(13) {
	grid-column-start: 1; 
	grid-column-end: span 5; 
}
.observer:nth-of-type(14) {
	grid-column-start: 2; 
	grid-column-end: span 5; 
}
.observer:nth-of-type(15) {
	grid-column-start: 3; 
	grid-column-end: span 5; 
}
.observer:nth-of-type(16) {
	grid-column-start: 1; 
	grid-column-end: span 5; 
}
.observer:nth-of-type(17) {
	grid-column-start: 2; 
	grid-column-end: span 5; 
}

.observer {
	margin-bottom: 5rem;
}

}



</style>
