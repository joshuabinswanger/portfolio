---
import Logo from "../components/Logo.astro";
import Index from './Index.astro';
import BracketOpenH from './BracketOpenH.astro';
import BracketMiddleH from './BracketMiddleH.astro';
import BracketCloseH from './BracketCloseH.astro';
import "../styles/global.css";
---

<nav id="NavBarMobile" transition:persist>
  <!-- Logo (if needed, wrap in an anchor or leave as is) -->
  <Logo />

  <div id="Menu">
    <div id="MainWrapper">
      <BracketOpenH />

      <!-- Menu item: Portfolio -->
      <a 
        id="portfolio"
        class:list={["main-button", "button", "animation"]} 
        href="/" 
        data-href="/"
        data-animation="in">
        Portfolio
      </a>

      <BracketMiddleH width="24px" />

      <!-- Archive submenu -->
      <a       
        id="projects"
        class:list={["main-button", "button", "animation"]}
        href="/projects"          
        data-href="/projects" 
        data-animation="out">
        Projects
      </a>

      <BracketMiddleH width="24px" />

      <!-- Menu item: Information -->
      <a 
        class:list={["main-button", "button", "animation"]} 
        href="/info" 
        data-href="/info"
        data-animation="out">
        Info
      </a>

      <BracketCloseH width="12px" />
    </div>
  </div>
</nav>

<style>
@import "../styles/global.css";

#NavBarMobile {
  display: block;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
}


#Menu {
  position: fixed;
  bottom: 0;
  width: calc(100vw - 4px - var(--scrollbar-width));
  background-color: var(--bg-color);
  z-index: 1001;
  padding-bottom: 2px;
  padding-left: 2px;
  padding-right: 2px;
}

#MainWrapper {
  height: 52px;
  display: grid;
  grid-gap: 0;
  grid-template-columns: 0 1fr 0 1fr 0 1fr 0;
  justify-items: center;
  z-index: 1002;
  transition: grid-template-columns 0.6s ease;
}

/* Main button styling and active animation */
.button {
  position: relative;
  overflow: hidden;
/*   width: calc((100vw - 4px - var(--scrollbar-width)) / 3); */
  width: 100%;
  transition: color 0.5s ease;
}

.button::after {
  content: "";
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 0%;
  background-color: black;
  transition: height 0.6s ease;
  z-index: -1;
}

.button.active {
  color: var(--bg-color);
}

.button.active::after {
  height: 100%;
}

/* General main-button styling */
.main-button {
  font-size: var(--font-size-dekstop-h1);
  font-family: PowerGrotesk-Light;
  font-weight: 200;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: transparent;
  cursor: pointer;

  @media (--bp-mobile) {
    font-size: var(--font-size-mobile-h1);
  }
  @media (--bp-tablet) {
    font-size: var(--font-size-tablet-h1);
  }
  @media (--bp-desktop-wide) {
    font-size: var(--font-size-desktop-wide-h1);
  }
}

a {
  text-decoration: none;
  color: black;
  width: 100%;
  height: 100%;
}


</style>

<script>
  import { navigate } from 'astro:transitions/client';
  
  // Update visual state (add/remove active class)
  function updateAnimationState(buttons) {
    setTimeout(() => {
      buttons.forEach(btn => {
        if (btn.getAttribute('data-animation') === "in") {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
    }, 300);
  }
  
  // Handle button click for all buttons
  function handleButtonClick(clickedBtn, buttons) {
    // Special branch for Archive main button:
    if (clickedBtn.id === "projects") {
      // Activate the Archive main button
      clickedBtn.setAttribute('data-animation', "in");

      // Optionally, set any other buttons in this group to "out"
      buttons.forEach(btn => {
        if (btn.id !== "projects") {
          btn.setAttribute('data-animation', "out");
        }
      });
  
      // Find all archive subitems and force "Gallery" active, others inactive.
      const archiveSubitems = document.querySelectorAll('.archive-subitems');
      archiveSubitems.forEach(btn => {
        if (btn.id === "archive-gallery") {
          btn.setAttribute('data-animation', "in");
        } else {
          btn.setAttribute('data-animation', "out");
        }
      });

      return;
    }
    
    // Special check: if clicked is Logo, force Portfolio active.
    if (clickedBtn.id === "Logo") {
      const portfolioBtn = Array.from(buttons).find(btn => btn.id === "portfolio");
      buttons.forEach(btn => {
        if (btn.id !== "portfolio" && btn.id !== clickedBtn.id) {
          btn.setAttribute('data-animation', "out");
        }
      });
      if (portfolioBtn) {
        portfolioBtn.setAttribute('data-animation', "in");
      }
      clickedBtn.setAttribute('data-animation', "in");
      return;
    }
    
    // For Archive subitems (Gallery, List, Projects):
    if (
      clickedBtn.id === "archive-gallery" ||
      clickedBtn.id === "archive-project-list" ||
      clickedBtn.id === "archive-projects"
    ) {
      const archiveSubitems = document.querySelectorAll('.archive-subitems');
      archiveSubitems.forEach(btn => {
        if (btn === clickedBtn) {
          btn.setAttribute('data-animation', "in");
        } else {
          btn.setAttribute('data-animation', "out");
        }
      });
      return;
    }
    
    // Default behavior: if button is currently "out", switch it "in" and set others "out"
    if (clickedBtn.getAttribute('data-animation') === "out") {
      buttons.forEach(btn => {
        if (btn !== clickedBtn && btn.getAttribute('data-animation') === "in") {
          btn.setAttribute('data-animation', "out");
        }
      });
      clickedBtn.setAttribute('data-animation', "in");
    }
  }
  
  // Attach event listeners to buttons
  function createEventListeners(buttons) {
    buttons.forEach(btn => {
      btn.addEventListener('click', event => {
        handleButtonClick(event.currentTarget, buttons);
      });
    });
  }
  
  // On page load, update visual state and attach click listeners.
  document.addEventListener("astro:page-load", () => {
    const navBar = document.getElementById("NavBarMobile");
    const mainButtons = navBar.querySelectorAll('.animation');
    updateAnimationState(mainButtons);
    createEventListeners(mainButtons);
  });
  
  // Archive subitems onchange event (if needed)
  document.addEventListener("astro:page-load", () => {
    const navBar = document.getElementById("NavBarMobile");
    const archiveSubitem = navBar.querySelector('.archive-subitems');
    if (archiveSubitem) {
      archiveSubitem.onchange = event => {
        const href = event.target.value;
        navigate(href);
      };
    }
  });
  </script>
