---
import Logo from "../components/Logo.astro";
import Index from './Index.astro';
import BracketOpenH from './BracketOpenH.astro';
import BracketMiddleH from './BracketMiddleH.astro';
import BracketCloseH from './BracketCloseH.astro';
import "../styles/global.css";
import { Image } from "astro:assets"
import RhizomLogo from "../assets/Rhizome_Logo_208h.jpg"
import JoshLogo from "../assets/joshuabinswanger_tempLogo.png"



// PERSONAL?
const { personal } = Astro.props;

interface Props {
  personal?: boolean; // Make personal prop optional as it might not always be passed
}

// Determine the correct href based on the personal prop
const galleryHref = personal ? "/personal/" : "/";
const projectsHref = personal ? "/personal/projects/" : "/projects/";
const infoHref = personal ? "/personal/info/" : "/info/";

// Determine the correct text content based on the personal prop
const galleryText = personal ? "Gallery" : "Portfolio";
const projectsText = personal ? "Projects" : "Projects";
const infoText = personal ? "Info" : "Info";

// Determine which logo to use based on the personal prop
const currentLogo = personal ? JoshLogo : RhizomLogo;
const logoAlt = personal ? "Joshua Binswanger Logo" : "Rhizom Logo";

---

<nav id="NavBarMobile" transition:persist>

  <a id="Logo" href="/" class:list={["animation"]} data-href="/" data-animation="out">
    <Image src={currentLogo} id="Image" alt={logoAlt} loading="eager">
  </a>

  <div id="Menu">
    <div id="MainWrapper">
      <BracketOpenH />

      <!-- Menu item: Portfolio -->
      <a 
        id="portfolio"
        class:list={["main-button", "button", "animation"]} 
        href={galleryHref} {/* Use the determined href here */}
        data-href={galleryHref} {/* Update data-href as well if used for animation */}
        data-animation="out">

        {galleryText} {/* Use the determined text content here */}
      </a>

      <BracketMiddleH />

      <!-- Projects submenu -->
      {/* Example of conditionally rendering the href and text for the projects link */}
      <a
        id="projects"
        class:list={["main-button", "button", "animation"]}
        href={projectsHref} {/* Use the determined href here */}
        data-href={projectsHref} {/* Update data-href as well if used for animation */}
        data-animation="out">

        {projectsText} {/* Use the determined text content here */}

      </a>

      <BracketMiddleH />

      <!-- Menu item: Information -->
      <a 
        class:list={["main-button", "button", "animation"]} 
        href={infoHref} {/* Use the determined href here */}
        data-href={infoHref} {/* Update data-href as well if used for animation */}
        data-animation="out">
        {infoText} {/* Use the determined text content here */}
      </a>

      <BracketCloseH />
    </div>
  </div>
</nav>

<style>
@import "../styles/global.css";

#NavBarMobile {
  display: block;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100vw;
  width: 100dvw;
}

#Logo {
  display: block;
  height: 100%;

  @media (--bp-mobile){

    margin-top: 32px;
    display: block;
    height: 36px;
    width: 144px;
    padding-left: 2px;

  }
}

#Image {
  height: min-content;
  width: 100%;
}


#Menu {
  position: fixed;
  bottom: 0;
 /*  width: calc(100vw - 4px - var(--scrollbar-width));
  min-width: calc(100vw - 4px - var(--scrollbar-width)); */
  left: 2px;
  right: 2px;
  background-color: var(--bg-color);
  z-index: 1001;
  padding-bottom: 2px;
  padding-left: 2px;
  padding-right: 2px;
}

#MainWrapper {
  height: 52px;
  display: grid;
  grid-gap: 0;
  grid-template-columns: 12px 1fr 24px 1fr 24px 1fr 12px;
  justify-items: center;
  z-index: 1002;
  transition: grid-template-columns 0.6s ease;
}

/* Main button styling and active animation */
.button {
  position: relative;
  overflow: visible; /* Changed from visible to hidden for smoother animation */
  width: 100%;
  transition: color 0.3s ease 0.15s; /* Added delay like desktop */
  display: flex;
  justify-content: center;
  align-items: center;
}

.button::after {
  content: "";
  position: absolute;
  left: -12px;
  bottom: 0;
  width: calc(100% + 24px);
  height: 0%;
  background-color: black;
  transition: height 0.6s ease;
  z-index: -1;
  /* Add these for smoother animation */
  transform-origin: bottom;
  will-change: height;
}

.button.active {
  color: var(--bg-color);
}

.button.active::after {
  height: 100%;
}

/* General main-button styling */
.main-button {
  font-size: var(--font-size-dekstop-h1);
  font-family: PowerGrotesk-Light;
  font-weight: 200;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: transparent;
  cursor: pointer;

  @media (--bp-mobile) {
    font-size: var(--font-size-mobile-h1);
  }
  @media (--bp-tablet) {
    font-size: var(--font-size-tablet-h1);
  }
  @media (--bp-desktop-wide) {
    font-size: var(--font-size-desktop-wide-h1);
  }
}

a {
  text-decoration: none;
  color: black;
  width: 100%;
  height: 100%;
}


</style>

<script>
  import { navigate } from 'astro:transitions/client';

  // Update visual state (add/remove active class) - NO CHANGE
  function updateAnimationState(buttons) {
    // Using the timeout from your mobile script
    setTimeout(() => {
      buttons.forEach(btn => {
        if (!btn) return; // Add safety check
        if (btn.getAttribute('data-animation') === "in") {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
    }, 500);
  }

  // Handle button click for all buttons - ADJUSTED (like Desktop)
  function handleButtonClick(clickedBtn, allButtonsNodeList) {
    if (!clickedBtn || !allButtonsNodeList) return; // Safety check

    const allButtons = Array.from(allButtonsNodeList);
    // Assuming main buttons are those NOT with id="Logo"
    const mainButtons = allButtons.filter(btn => btn && btn.id !== 'Logo'); 

    // Special check: if clicked is Logo
    if (clickedBtn.id === "Logo") {
      const portfolioBtn = allButtons.find(btn => btn && btn.id === 'portfolio'); 

      // Deactivate all MAIN buttons
      mainButtons.forEach(btn => {
        if (btn) btn.setAttribute('data-animation', 'out');
      });

      // Activate portfolio button
      if (portfolioBtn) {
        portfolioBtn.setAttribute('data-animation', 'in');
      }
      
      // Ensure logo itself remains visually 'out' (or handle its state if needed)
      clickedBtn.setAttribute('data-animation', 'out'); 

    } else { // Clicked a main button (portfolio, projects, info)
      
      // Only proceed if the clicked button is currently "out"
      if (clickedBtn.getAttribute('data-animation') === "out") {
        // Deactivate other MAIN buttons that are currently "in"
        mainButtons.forEach(btn => {
          if (btn && btn !== clickedBtn && btn.getAttribute('data-animation') === "in") {
            btn.setAttribute('data-animation', "out");
          }
        });
        // Activate the clicked button
        clickedBtn.setAttribute('data-animation', "in");
      }
    }

    // Update the visual state for ALL buttons AFTER any changes
    updateAnimationState(allButtonsNodeList); 

    // Navigation is handled by the browser/Astro View Transitions
  }

  // Attach event listeners to buttons - Added simple duplicate check
  function createEventListeners(buttons) {
    buttons.forEach(btn => {
       if (!btn) return; // Safety check
       // Basic check to prevent adding multiple listeners
       if (!btn.hasClickListener) {
            btn.addEventListener('click', event => {
                // event.preventDefault(); // Usually NOT needed with View Transitions
                
                // Pass event.currentTarget and the NodeList the listener was added to
                handleButtonClick(event.currentTarget, buttons); 
            });
            btn.hasClickListener = true; // Mark listener as added
        }
    });
  }

  // Consolidated page load logic - REPLACING astro:before-swap listeners
  document.addEventListener("astro:page-load", () => {
    const navBar = document.getElementById("NavBarMobile");
    if (!navBar) return;

    // --- ADJUSTED SELECTOR (Assuming Logo is outside Menu, main buttons inside) ---
    // Select the Logo (#Logo) AND the direct children 'a.animation' of MainWrapper inside Menu
    // Adjust selector if your mobile HTML structure is different
    const allNavButtons = navBar.querySelectorAll('#Logo, #Menu #MainWrapper > a.animation'); 
    // --- ADJUSTED SELECTOR ---

    if (allNavButtons.length === 0) return;

     // --- START: URL Matching Logic (Applied to Mobile) ---
     let isActiveAlreadySet = false;
     allNavButtons.forEach(btn => {
       if (!btn) return;
       // Check persisted state via attribute or class
       if (btn.getAttribute('data-animation') === 'in' || btn.classList.contains('active')) { 
         isActiveAlreadySet = true;
       }
     });

     // If no button is active from persisted state, set based on URL
     if (!isActiveAlreadySet) {
       const currentPath = window.location.pathname;
       let foundMatch = false;
       let portfolioButton = null; // Reference to the root ('/') button

       allNavButtons.forEach(btn => {
         if (!btn) return;
         const buttonHref = btn.getAttribute('data-href');
         
         // Remember the portfolio button (adjust ID if different in mobile)
         if (buttonHref === '/') { 
             portfolioButton = btn; 
         }

         // Check for exact path match
         if (buttonHref === currentPath) {
           // Set all buttons to 'out' first
           allNavButtons.forEach(otherBtn => { if(otherBtn) otherBtn.setAttribute('data-animation', 'out')}); 
           // Set the matched button to 'in'
           btn.setAttribute('data-animation', 'in');
           foundMatch = true;
         } 
       });

       // Fallback: If no match found and not on root, activate portfolio button
       if (!foundMatch && currentPath !== '/' && portfolioButton) {
          allNavButtons.forEach(otherBtn => { if(otherBtn) otherBtn.setAttribute('data-animation', 'out')}); 
          portfolioButton.setAttribute('data-animation', 'in'); 
       }
     }
    // --- END: URL Matching Logic ---


    // Initial visual state update based on URL matching or persisted state
    updateAnimationState(allNavButtons); 

    // Attach listeners to ALL selected buttons (Logo + Main buttons)
    createEventListeners(allNavButtons); 
  });

  // Optional: Cleanup listeners before swap (more robust with WeakMap, but this is simpler)
  document.addEventListener("astro:before-swap", () => {
      const navBar = document.getElementById("NavBarMobile");
      if (!navBar) return;
      // Re-select buttons to potentially remove listeners
      const allNavButtons = navBar.querySelectorAll('#Logo, #Menu #MainWrapper > a.animation');
      allNavButtons.forEach(btn => {
          if (btn) {
              // Reset the flag so listeners can be re-added after swap
              btn.hasClickListener = false; 
              // Note: This doesn't actually *remove* the listener without more complex tracking,
              // but prevents re-adding in the simple check within createEventListeners.
          }
      });
  });

</script>
