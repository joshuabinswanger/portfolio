---
import Logo from "../components/Logo.astro";
import Index from './Index.astro';
import BracketOpenH from './BracketOpenH.astro';
import BracketMiddleH from './BracketMiddleH.astro';
import BracketCloseH from './BracketCloseH.astro';
import "../styles/global.css";
---

<nav id="NavBarMobile" transition:persist>

  <!-- Convert logo container to a clickable anchor (matching desktop) -->

    <Logo />

  <div id="Menu">
    <div id="MainWrapper">
      <BracketOpenH />

      <!-- Menu item: Portfolio -->
      <a 
        id="portfolio"
        class:list={["menu-items main-button animation"]} 
        href="/" 
        data-href="/"
        data-animation="in">
        Portfolio
      </a>

      <BracketMiddleH />

      <!-- Archive submenu -->
      <div id="archive">
        <a       
          id="archive-main"
          class:list={["menu-items main-button animation"]}
          href="/archive-gallery"          
          data-href="/archive-gallery" data-animation="out">
          Archive
        </a>
        <div id="archive-select">
          <a 
            class:list={["archive-subitems"]} 
            href="/archive-gallery"
            data-href="/archive-gallery">
            Gallery
          </a>
          <a 
            class:list={["archive-subitems"]} 
            href="/archive-project-list"
            data-href="/archive-project-list">
            List
          </a>
          <a 
            class:list={["archive-subitems"]} 
            href="/archive-projects"
            data-href="/archive-projects">
            Projects
          </a>
        </div>
      </div>

      <BracketMiddleH />

      <!-- Menu item: Information -->
      <a 
        class:list={["menu-items main-button animation"]} 
        href="/info" 
        data-href="/info"
        data-animation="out">
        Information
      </a>

      <BracketCloseH />
    </div>
  </div>
</nav>

<style>
@import "../styles/global.css";

#NavBarMobile {
  display: block;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
}


#Menu {
  position: fixed;
  bottom: 0;
  width: calc(100vw - 4px - var(--scrollbar-width));
  background-color: var(--bg-color);
  z-index: 1001;
  padding-bottom: 2px;
  padding-left: 2px;
  padding-right: 2px;
}

#MainWrapper {
  height: 3rem;
  display: grid;
  grid-gap: 0;
  grid-template-columns: 0 1fr 0 1fr 0 1fr 0;
  justify-items: center;
  z-index: 1002;
}

/* Main button styling and active animation */
.main-button {
  position: relative;
  overflow: hidden;
  width: 100%;
  transition: color 0.5s ease;
}

.main-button::after {
  content: "";
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 0%;
  background-color: black;
  transition: height 0.75s ease;
  z-index: -1;
}

.main-button.active {
  color: var(--bg-color);
}

.main-button.active::after {
  height: 100%;
}

/* General menu-items styling */
.menu-items {
  font-size: var(--font-size-dekstop-h1);
  font-family: PowerGrotesk-Light;
  font-weight: 200;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: transparent;
  cursor: pointer;
}

a {
  text-decoration: none;
  color: black;
  width: 100%;
  height: 100%;
}

/* Archive submenu styling */
#archive {
  display: grid;
  width: 100%;
  grid-template-columns: 1fr min-content;
  align-items: center;
}

#archive-select {
  display: none;
  justify-content: center;
  align-content: center;
  grid-template-columns: 1fr 1fr 1fr;
  padding-right: 3vw;
  width: 100%;
  height: 100%;
}

.archive-subitems {
  font-size: 11px;
  cursor: pointer;
  padding: 0 1vw;
  width: 100%;
  height: 100%;
}
</style>

<script>
import { navigate } from 'astro:transitions/client';

// Update visual state (e.g., add or remove the "active" class)
function updateAnimationState(buttons) {
  setTimeout(() => {
    buttons.forEach(btn => {
      if (btn.getAttribute('data-animation') === "in") {
        btn.classList.add('active');
      } else {
        btn.classList.remove('active');
      }
    });
  }, 600);
}

// When a button is clicked, if it's marked "out",
// set all others (with data-animation="in") to "out" and the clicked one to "in".
function handleButtonClick(clickedBtn, buttons) {
  // Special check: if the clicked element is the logo, force Portfolio active.
  if (clickedBtn.id === "Logo") {
    const portfolioBtn = Array.from(buttons).find(btn => btn.id === "portfolio");
    buttons.forEach(btn => {
      if (btn.id !== "portfolio" && btn.id !== clickedBtn.id) {
        btn.setAttribute('data-animation', "out");
      }
    });
    if (portfolioBtn) {
      portfolioBtn.setAttribute('data-animation', "in");
    }
    clickedBtn.setAttribute('data-animation', "in");
  } else {
    if (clickedBtn.getAttribute('data-animation') === "out") {
      buttons.forEach(btn => {
        if (btn !== clickedBtn && btn.getAttribute('data-animation') === "in") {
          btn.setAttribute('data-animation', "out");
        }
      });
      clickedBtn.setAttribute('data-animation', "in");
    }
  }
}

// Attach click event listeners to each button
function createEventListeners(buttons) {
  buttons.forEach(btn => {
    btn.addEventListener('click', (event) => {
      handleButtonClick(event.currentTarget, buttons);
    });
  });
}

// On page load, update visual state and attach event listeners
document.addEventListener("astro:page-load", () => {
  const navBar = document.getElementById("NavBarMobile");
  const mainButtons = navBar.querySelectorAll('.animation');
  updateAnimationState(mainButtons);
  createEventListeners(mainButtons);
});

// Archive subitems onchange event (if applicable)
document.addEventListener("astro:page-load", () => {
  const navBar = document.getElementById("NavBarMobile");
  const archiveSubitems = navBar.querySelector('.archive-subitems');
  if (archiveSubitems) {
    archiveSubitems.onchange = (event) => {
      const href = event.target.value;
      navigate(href);
    };
  }
});
</script>
