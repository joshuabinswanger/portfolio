---
import BracketOpenH from "./BracketOpenH.astro";
import BracketMiddleH from "./BracketMiddleH.astro";
import BracketCloseH from "./BracketCloseH.astro";
import TopWrapper from "../layouts/TopWrapper.astro";
import GridLayout from "../layouts/GridLayout.astro";
import ArchiveElement from "./ArchiveElementIsotope.astro";
import { getCollection } from "astro:content";

// Filter the collection to include only items with metadata.archive === "include"
const archiveImages = await getCollection('galleryImages', ({ data }) => {
  return data.metadata?.archive === "include";
});



//////////////////
///// TAGS ///////
//////////////////


// Helper function to ensure we get an array from any input
function ensureArray(value) {
  if (!value) return [];
  if (Array.isArray(value)) return value;
  return value.split(',').map(item => item.trim()); // Split by comma and trim spaces
}



//// Role /////

/// extract role tags
const role = Array.from(
  new Set(archiveImages.flatMap((image) => ensureArray(image.data.metadata?.role) || []))
);

console.log("Role Array:", role); // Log the array to the console

//Filter the tags so only those in `AllowedList` remain
const roleAllowedList = ["2D", "3D", "Dev"];
const roleListLength = roleAllowedList.length;
const roleListLengthString = roleListLength.toString();

const roleAllowed = role.filter(tag => roleAllowedList.includes(tag));

//covnert to CSS conform tags
const roleConversionCSS = {
  "2D": "twoD",
  "3D": "threeD"
};

const roleConversionName = {
  "Dev": "Tech",
};


const roleConvertedCSS = roleAllowed.map(tag => roleConversionCSS[tag] || tag);
const roleConvertedName = roleAllowed.map(tag => roleConversionName[tag] || tag);


//// PROGRAM /////

/// extract role tags
const program = Array.from(
  new Set(archiveImages.flatMap((image) => ensureArray(image.data.metadata?.program) || []))
);

console.log("Program Array:", program); // Log the array to the console

//Filter the tags so only those in `AllowedList` remain
const programAllowedList = ["Houdini", "Blender", "ZBrush", "Rive", "SubstancePainter"];
const programListLength = programAllowedList.length;
const programListLengthString = programListLength.toString();

const programAllowed = program.filter(tag => programAllowedList.includes(tag));

//covnert to CSS conform tags
const programConversionCSS = {
};

const programConversionName = {
  "SubstancePainter" : "Substance Painter"
};


const programConvertedCSS = programAllowed.map(tag => programConversionCSS[tag] || tag);
const programConvertedName= programAllowed.map(tag => programConversionName[tag] || tag);





//// TOPIC /////

/// extract role tags
const topic = Array.from(
  new Set(archiveImages.flatMap((image) => ensureArray(image.data.metadata?.topic) || []))
);

console.log("Topic Array:", topic); // Log the array to the console

//Filter the tags so only those in `AllowedList` remain
const topicAllowedList = ['Poster', 'Tutorial', 'SciCom', 'MoGraph', 'Real-time', 'Wood', 'Character', 'Proceduralism', 'Creature'];
const topicListLength = topicAllowedList.length;
const topicListLengthString = topicListLength.toString();

const topicAllowed = topic.filter(tag => topicAllowedList.includes(tag));

//covnert to CSS conform tags
const topicConversionCSS = {
};
const topicConversionName = {
  "MoGraph" : "Motion",
  "SciCom" : "Science",
  "Proceduralism" : "Procedural" 
};

const topicConvertedCSS = topicAllowed.map(tag => topicConversionCSS[tag] || tag);
const topicConvertedName = topicAllowed.map(tag => topicConversionName[tag] || tag);


---

<TopWrapper>
  <div class:list={["ArchiveWrapper"]} id="ArchiveWrapper">
  <!-- Filter Buttons-->
  <div id="filter-top-wrapper" >

    <!-- Role -->
    <div class:list={[`filters-button-group`]} id="role-buttons-wrapper" data-filter-group="role">
      <BracketOpenH />

      <button class:list={["filter-button is-checked"]} data-filter="*">Role</button>
      {roleConvertedCSS.map((tag, index) => (
        <button class:list={[`filter-button ${tag}`]}  data-filter={`.${tag}`}>
            {roleConvertedName[index]}
        </button>
      ))}

      <BracketCloseH />
    </div>

    <!-- Program -->
    <div class:list={[`filters-button-group`]} id="program-buttons-wrapper" data-filter-group="program">
      <BracketOpenH />

      <button class="filter-button is-checked" data-filter="*">Tool</button>
      {programConvertedCSS.map((tag, index) => (
        <button class:list={[`filter-button ${tag}`]}  data-filter={`.${tag}`}>
            {programConvertedName[index]}

        </button>
      ))}
      <BracketCloseH />
    </div>

    <!-- Topic -->
    <div class:list={[`filters-button-group`]} id="topic-buttons-wrapper" data-filter-group="topic">
      <BracketOpenH />

      <button class="filter-button is-checked" data-filter="*">Topic</button>
      {topicConvertedCSS.map((tag, index) => (
        <button class:list={[`filter-button ${tag}`]}  data-filter={`.${tag}`}>
            {topicConvertedName[index]}

        </button>
      ))}
      <BracketCloseH />
    </div>

  </div>

    <div class:list={["grid"]} id="Archive">
        {archiveImages.map((image, index) => (
      
                <ArchiveElement
                    public_id={image.data.public_id} // Ensure `public_id` exists
                    index={index}
                />

        ))}
    </div>
 
</TopWrapper>

<script>
import Isotope from 'isotope-layout';
import imagesloaded from 'imagesloaded';
import cellsByRow from 'isotope-cells-by-row';


const gridItem = document.querySelector('.grid-item'); 
const filterButtons = document.querySelectorAll('.filter-button');

/////////////////////
///set padding etc///
/////////////////////

// Function to apply styles based on screen size

  



document.addEventListener('astro:page-load', () => {

const gridElement = document.querySelector('.grid');
const filterTopWrapperElement = document.querySelector('#filter-top-wrapper');

function updateFilterButtonStyles() {
      // Calculate the archive width
      const archiveWidth = gridElement.offsetWidth;

      // Set the --archive-width CSS variable dynamically
      filterTopWrapperElement.style.setProperty('--archive-width', `${archiveWidth}px`);
    }

updateFilterButtonStyles();

    /////////////////////
  ///////Isotope//////
  /////////////////////


  var grid = document.querySelector('.grid');
    var iso;
    let imagesLoaded;
    let cellsByRow;

    // Filter Functions
    var filterFns = {};
    // Filter Functions
    var filterFns = {};

    // store filter for each group
    var filters = {};
    // store filter for each group
    var filters = {};

    var iso = new Isotope( grid, {
      layoutMode: 'cellsByRow',
      itemSelector: '.grid-item',
      percentPosition: true,
      sortBy : 'random',
      cellsByRow: {
        columnWidth: '.grid-item',
        rowHeight: '.grid-item'
      },
    var iso = new Isotope( grid, {
      layoutMode: 'cellsByRow',
      itemSelector: '.grid-item',
      percentPosition: true,
      sortBy : 'random',
      cellsByRow: {
        columnWidth: '.grid-item',
        rowHeight: '.grid-item'
      },

      filter: function(itemElem) {
        // Assume the item matches by default
        var isMatched = true;
      filter: function(itemElem) {
        // Assume the item matches by default
        var isMatched = true;

        // Loop through each property in the `filters` object
        for (var prop in filters) {
          var filter = filters[prop]; // Get the filter value for the current property
        // Loop through each property in the `filters` object
        for (var prop in filters) {
          var filter = filters[prop]; // Get the filter value for the current property

          // If the filter is a function defined in `filterFns`, use it. Otherwise, use the raw filter value.
          filter = filterFns[filter] || filter;
          // If the filter is a function defined in `filterFns`, use it. Otherwise, use the raw filter value.
          filter = filterFns[filter] || filter;

          // Check the type of the filter to determine how to apply it
          var filterType = typeof filter;
          // Check the type of the filter to determine how to apply it
          var filterType = typeof filter;

          // If the filter is a function, call it and pass `itemElem` to test if it matches
          if (filter && filterType == 'function') {
            isMatched = filter(itemElem); // Apply the filter function
          }
          // If the filter is not a function but is a valid value, check if `itemElem` matches the selector
          else if (filter) {
            isMatched = itemElem.matches(filter); // Use Element.matches() to test if the item matches the filter
          }
          // If the filter is a function, call it and pass `itemElem` to test if it matches
          if (filter && filterType == 'function') {
            isMatched = filter(itemElem); // Apply the filter function
          }
          // If the filter is not a function but is a valid value, check if `itemElem` matches the selector
          else if (filter) {
            isMatched = itemElem.matches(filter); // Use Element.matches() to test if the item matches the filter
          }

          // If the item does not match the current filter, break out of the loop early
          if (!isMatched) {
            break; // No need to check other filters if this one fails
          }
        }
          // If the item does not match the current filter, break out of the loop early
          if (!isMatched) {
            break; // No need to check other filters if this one fails
          }
        }

        // Return true if the item matched all filters, false otherwise
        return isMatched;
        // Return true if the item matched all filters, false otherwise
        return isMatched;

      }
      
    });
      }
      
    });

    imagesloaded( grid ).on( 'progress', function() {
      // layout Isotope after each image loads
      iso.layout();
    });
    imagesloaded( grid ).on( 'progress', function() {
      // layout Isotope after each image loads
      iso.layout();
    });

   // bind filter button click
   var filtersElem = document.querySelectorAll('.filters-button-group');
    filtersElem.forEach(element => {
      element.addEventListener( 'click', function( event ) {
      // only work with buttons
      if (!event.target.matches('button')) {
        return;
      }
      
      // get group key
      var buttonGroup = event.target.parentNode;
      var filterGroup = buttonGroup.getAttribute('data-filter-group');


      filters[ filterGroup ] = event.target.getAttribute('data-filter');
      filters[ filterGroup ] = event.target.getAttribute('data-filter');

      // use matching filter function
      iso.arrange();
    });
  });
    
      // use matching filter function
      iso.arrange();
    });
  });
    


  // change is-checked class on buttons
    var buttonGroups = document.querySelectorAll('.filters-button-group');
    for ( var i=0, len = buttonGroups.length; i < len; i++ ) {
      var buttonGroup = buttonGroups[i];
      radioButtonGroup( buttonGroup );
    }
  // change is-checked class on buttons
    var buttonGroups = document.querySelectorAll('.filters-button-group');
    for ( var i=0, len = buttonGroups.length; i < len; i++ ) {
      var buttonGroup = buttonGroups[i];
      radioButtonGroup( buttonGroup );
    }

    function radioButtonGroup(buttonGroup) {
    buttonGroup.addEventListener('click', function (event) {
      // Only proceed if the target is a button
      if (!event.target.matches('button')) {
        return;
      }
    function radioButtonGroup(buttonGroup) {
    buttonGroup.addEventListener('click', function (event) {
      // Only proceed if the target is a button
      if (!event.target.matches('button')) {
        return;
      }

      // If the clicked button is already checked
      if (event.target.classList.contains('is-checked')) {
        // Set the `data-filter="*"` button as checked
        const allFilterButton = buttonGroup.querySelector('button[data-filter="*"]');
        if (allFilterButton) {
          buttonGroup.querySelector('.is-checked').classList.remove('is-checked');
          allFilterButton.classList.add('is-checked');
      // If the clicked button is already checked
      if (event.target.classList.contains('is-checked')) {
        // Set the `data-filter="*"` button as checked
        const allFilterButton = buttonGroup.querySelector('button[data-filter="*"]');
        if (allFilterButton) {
          buttonGroup.querySelector('.is-checked').classList.remove('is-checked');
          allFilterButton.classList.add('is-checked');

          // Update the filter group to reset the filter
          const filterGroup = buttonGroup.getAttribute('data-filter-group');
          filters[filterGroup] = '*';
          // Update the filter group to reset the filter
          const filterGroup = buttonGroup.getAttribute('data-filter-group');
          filters[filterGroup] = '*';

          // Trigger Isotope filtering
          iso.arrange();
        }
      } else {
        // Normal behavior: switch the `is-checked` class
        buttonGroup.querySelector('.is-checked').classList.remove('is-checked');
        event.target.classList.add('is-checked');
          // Trigger Isotope filtering
          iso.arrange();
        }
      } else {
        // Normal behavior: switch the `is-checked` class
        buttonGroup.querySelector('.is-checked').classList.remove('is-checked');
        event.target.classList.add('is-checked');

        // Update the filter group with the new filter
        const filterGroup = buttonGroup.getAttribute('data-filter-group');
        filters[filterGroup] = event.target.getAttribute('data-filter');
        // Update the filter group with the new filter
        const filterGroup = buttonGroup.getAttribute('data-filter-group');
        filters[filterGroup] = event.target.getAttribute('data-filter');

        // Trigger Isotope filtering
        iso.arrange();
      }
    });
  }

  window.addEventListener('resize', iso.layout);
  window.addEventListener('resize', updateFilterButtonStyles);

})



</script>


<style define:vars={{ roleListLengthString, programListLengthString, topicListLengthString }}>

@import "../styles/global.css";



#ArchiveWrapper {
  padding-top: var(--padding-desktop);
  display: grid;
  grid-template-rows: min-content 1fr;

  @media (--bp-mobile) {
		padding-top: 2rem; 
	}

	@media (--bp-tablet) {

		padding-top: var(--padding-tablet); 

	}

	@media (--bp-desktop-wide) {

		padding-top: var(--padding-desktop-wide);

	 
	}
}

#Archive {
  padding-top: 4rem;

  @media (--bp-mobile) {
		padding-top: 0rem; 
	}

}

#filter-top-wrapper {
  display: grid;
  position: fixed;
  position: fixed;
  z-index: 2;
  grid-template-columns: 1fr 2fr;
  grid-template-rows: min-content min-content;
  row-gap: 0.25rem;
  --archive-width: 100%;
  width: var(--archive-width);
  column-gap: 1rem;
  overflow: visible;
  padding: 0;
  background-color: var(--bg-color-trans);
  
  @media (--bp-mobile) {
    display: grid;
    position: fixed;
    bottom: 10px;
    grid-template-columns: auto auto auto;
    column-gap: 0.5rem;
    grid-template-columns: auto auto auto;
    column-gap: 0.5rem;
    width: calc(var(--archive-width) - 4px);
    overflow-y: hidden;
    overflow-x: scroll;
    
  }


}


#role-buttons-wrapper, #program-buttons-wrapper, #topic-buttons-wrapper {
  /* Set width to grid width - navbar - margin */
  display: grid;
  grid-row-start: 1;
  column-gap: 0rem;
  z-index: 2;


  @media (--bp-mobile) {
    font-size: var(--font-size-mobile-small);
    margin: 0px 1px;
    margin: 0px 1px;
  }
}


/* set in frontmatter */
#role-buttons-wrapper{
grid-column-start: 1;
  grid-template-columns: 0 7.5ch repeat(var(--roleListLengthString), 1fr) min-content;

  
  @media (--bp-mobile) {
    grid-column-start: 1;
  }

}

#program-buttons-wrapper {
  grid-column-start: 2;
  grid-column-end: 3;
  grid-template-columns: min-content 6.5ch repeat(var(--programListLengthString), 1fr) 0;

  @media (--bp-mobile) {
    grid-column-start: 2;
  }

    
}  

#topic-buttons-wrapper {
  grid-column-start: 1;
  grid-column-end: 3;
  grid-row-start: 2;
  grid-template-columns: 0 8ch repeat(var(--topicListLengthString), 1fr) 0;

  @media (--bp-mobile) {
    grid-column-start: 3;
    grid-row-start: 1;
  }

}  


.filter-button {
  font-family: PowerGrotesk-Light;
  color: black;
  font-size: 11px;
  letter-spacing: 0.6px;
  border: 0px;
  background-color: transparent;
  padding: 0 0.5rem;
  height: 1.3rem;

  
  @media (--bp-mobile) {
    height: 3rem;
    height: 3rem;
  }

}

.filter-button.is-checked {
  color: var(--bg-color);
  background-color: black;
}

</style>