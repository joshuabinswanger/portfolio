---
import TopWrapper from "../layouts/TopWrapper.astro";
import GridLayout from "../layouts/GridLayout.astro";
import ArchiveElement from "./ArchiveElementIsotope.astro";
import { getCollection } from "astro:content";

// Filter the collection to include only items with metadata.archive === "include"
const archiveImages = await getCollection('galleryImages', ({ data }) => {
  return data.metadata?.archive === "include";
});

// Extract and deduplicate tags
const tags = Array.from(
  new Set(archiveImages.flatMap((image) => image.data.tags || []))
);

---

<TopWrapper>
  <div class:list="ArchiveWrapper" id="ArchiveWrapper">
    <!-- Button Group for Tags -->
    <div class="button-group filters-button-group" id="filter-list">
      <button class="filter-button is-checked" data-filter="*">All</button>
      {tags.map((tag) => (
        <button class="filter-button" data-filter={`.${tag}`} key={tag}>
            {tag}

        </button>
      ))}
    </div>

    <div class:list={["grid"]} id="Archive">
        {archiveImages.map((image, index) => (
      
                <ArchiveElement
                    public_id={image.data.public_id} // Ensure `public_id` exists
                    index={index}
                />

        ))}
    </div>
  </div>
</TopWrapper>

<script>
import Isotope from 'isotope-layout';
import imagesloaded from 'imagesloaded';
import cellsByRow from 'isotope-cells-by-row';

const gridElement = document.querySelector('.grid');
const filterListElement = document.querySelector('#filter-list');
const gridItem = document.querySelector('.grid-item'); 
const filterButtons = document.querySelectorAll('.filter-button');


/////////////////////
///set padding etc///
/////////////////////

// Function to apply styles based on screen size
function updateFilterButtonStyles() {
  const isMobile = window.matchMedia('(width <= 650px)').matches;

  if (gridElement && filterListElement && gridItem) {
    if (isMobile) {
      // Explicitly set padding for mobile
      filterButtons.forEach((button) => {
        button.style.padding = '0';
      });
    } else {
      // Calculate padding dynamically for larger screens
      const computedStyle = window.getComputedStyle(gridItem);
      const paddingRight = parseFloat(computedStyle.paddingRight) || 0;

      filterButtons.forEach((button) => {
        button.style.padding = `0 ${paddingRight}px`;
      });

      // Calculate the archive width
      const archiveWidth = gridElement.offsetWidth;

      // Set the --archive-width CSS variable dynamically
      filterListElement.style.setProperty('--archive-width', `${archiveWidth}px`);
    }
  }
}

document.addEventListener('astro:page-load', () => {
  
  updateFilterButtonStyles();

  /////////////////////
  ///////Isotope//////
  /////////////////////

  var grid = document.querySelector('.grid');
  var iso;
  let imagesLoaded;
  let cellsByRow;

  var iso = new Isotope( grid, {
    layoutMode: 'cellsByRow',
    itemSelector: '.grid-item',
    percentPosition: true,
    cellsByRow: {
      columnWidth: '.grid-item',
      rowHeight: '.grid-item'
    }
  });

  imagesloaded( grid ).on( 'progress', function() {
    // layout Isotope after each image loads
    iso.layout();
  });

  var filterFns = {};

    // bind filter button click
  var filtersElem = document.querySelector('.filters-button-group');
  filtersElem.addEventListener( 'click', function( event ) {
    // only work with buttons
 /*    if ( !matchesSelector( event.target, 'button' ) ) {
      return;
    } */
    var filterValue = event.target.getAttribute('data-filter');
    // use matching filter function
    filterValue = filterFns[ filterValue ] || filterValue;
    iso.arrange({ filter: filterValue });
  });

  // change is-checked class on buttons
  var buttonGroups = document.querySelectorAll('.button-group');
  for ( var i=0, len = buttonGroups.length; i < len; i++ ) {
    var buttonGroup = buttonGroups[i];
    radioButtonGroup( buttonGroup );
  }

  function radioButtonGroup( buttonGroup ) {
    buttonGroup.addEventListener( 'click', function( event ) {
/*       // only work with buttons
      if ( !matchesSelector( event.target, 'button' ) ) {
        return;
      } */
      buttonGroup.querySelector('.is-checked').classList.remove('is-checked');
      event.target.classList.add('is-checked');
    });
  }

})

window.addEventListener('resize', updateFilterButtonStyles);

</script>


<style>

@import "../styles/global.css";



#ArchiveWrapper {
  padding-top: var(--padding-desktop);
  display: grid;
  grid-template-rows: min-content 1fr;

  @media (--bp-mobile) {
		padding-top: 2rem; 
	}

	@media (--bp-tablet) {

		padding-top: var(--padding-tablet); 

	}

	@media (--bp-desktop-wide) {

		padding-top: var(--padding-desktop-wide);

	 
	}
}

#Archive {
  padding-top: 2rem;
}

#filter-list {
    /* Set width to grid width - navbar - margin */
  --archive-width: 50%;
  --filter-number: 5;
  position: fixed;
  background-color: var(--bg-color-trans);
  z-index: 2;
  display: grid;
  grid-template-columns: repeat(var(--filter-number), calc(var(--archive-width) / var(--filter-number)));
  grid-auto-rows: auto;
  row-gap: 1rem;
  height: min-content;
  width: var(--archive-width);

  @media (--bp-mobile) {
    font-size: var(--font-size-mobile-small);
    left: 0;
    --filter-number: 4;
    width:100%;
    bottom: 0;
    row-gap: .25rem;
    grid-template-columns: repeat(auto-fill, minmax(25%, 1fr));
	}

	@media (--bp-tablet) {
    --filter-number: 4;
    width: 92%;
    padding: 0 4%;

	}

	@media (--bp-desktop-wide) {
    --filter-number: 6;
	}

}

.filter-button {
  font-family: PowerGrotesk-Light;
  letter-spacing: 0.6px;
  border: 0px;
  background-color: transparent;
  padding: 0 0;
}

.filter-button.is-checked {
  color: var(--bg-color);
  background-color: black;
}

</style>