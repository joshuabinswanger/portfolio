---
import SquareBracketH from "./SquareBracket_H.astro";
import SquareBracketV from "./SquareBracket_V.astro";
import BracketOpenH from "./BracketOpenH.astro";
import BracketCloseH from "./BracketCloseH.astro";
import BracketMiddleH from "./BracketMiddleH.astro";
import Icon from "./Icon.astro";
import "../styles/global.css";
import ImageElement from "./ImageElement.astro";
import ThumbnailElement from "./ThumbnailElement.astro";

interface Props {
  totalImages: number;
  title: string;
  subtitle: string;
}

const { totalImages, title, subtitle } = Astro.props;
const instanceId = Math.random().toString(36).slice(2, 11);  // Generate a unique ID for each instance
---

<div class:list={["GalleryElementWrapper"]} id={`GalleryElement-${instanceId}`}>
  <div id="ImageWrapper">

    {totalImages >= 1 && (
      <div id="ImageContainer">

        <div class:list={ "ImageInfo"}>

          <div class:list={"ImageInfoText"}>
            <p><slot name="ImageInfoTitel1" /></p>
            <p><slot name="ImageInfo1" /></p>
          </div>

          <div class:list={"DetailsWrapper"}>
            <div class:list={"DetailClient"}>
              <h1><slot name="ClientTitel1" /></h1>
              <h2><slot name="Client1" /></h2>
            </div>
            <div class:list={"DetailTools"}>
              <h1><slot name="ToolsTitel1" /></h1>
              <h2><slot name="Tools1" /></h2>
            </div>
            <div class:list={"DetailCollab"}>
              <h1><slot name="CollabTitel1" /></h1>
              <h2><slot name="Collab1" /></h2>
            </div>
            <div class:list={"DetailMyPart"}>
              <h1><slot name="MyPartTitel1" /></h1>
              <h2><slot name="MyPart1" /></h2>
            </div>
          </div>

        </div>

        <slot name="Image1" />

      </div>
    )}



    {totalImages >= 2 && (
      <div id="ImageContainer">
        <div class:list={ "ImageInfo"}>
          <slot name="ImageInfo2" />
          <p>Hello</p>
        </div>
        <slot name="Image2" />
      </div>
    )}
    {totalImages >= 3 && (
      <div id="ImageContainer">
        <div class:list={ "ImageInfo"}>
          <slot name="ImageInfo3" />
          <p>Hello</p>
        </div>
        <slot name="Image3" />
      </div>
    )}
    {totalImages >= 4 && (
      <div id="ImageContainer">
        <div class:list={ "ImageInfo"}>
          <slot name="ImageInfo4" />
          <p>Hello</p>
        </div>
        <slot name="Image4" />
      </div>
    )}
    {totalImages >= 5 && (
      <div id="ImageContainer">
        <div class:list={ "ImageInfo"}>
          <slot name="ImageInfo5" />
          <p>Hello</p>
        </div>
        <slot name="Image5" />
      </div>
    )}
    {totalImages >= 6 && (
      <div id="ImageContainer">
        <div class:list={ "ImageInfo"}>
          <slot name="ImageInfo6" />
          <p>Hello</p>
        </div>
        <slot name="Image6" />
      </div>
    )}
    {totalImages >= 7 && (
      <div id="ImageContainer">
        <div class:list={ "ImageInfo"}>
          <slot name="ImageInfo7" />
          <p>Hello</p>
        </div>
        <slot name="Image6" />
      </div>
    )}
  </div>

  <div id="GalleryDescriptionWrapper">
    <BracketOpenH />

    <div id="TextContainer">
      <div id="TextWrapper">
        <h1>{title}</h1>
        <h2>{subtitle}</h2>
      </div>
    </div>

    <BracketMiddleH />

    <div id="ArrowWrapper">
      <div id="ArrowContainer" class:list={["prevArrow"]}>&larr;</div>
      <div id="CounterContainer">1 / {totalImages}</div>
      <div id="ArrowContainer" class:list={["nextArrow"]}>&rarr;</div>
    </div>

    <BracketMiddleH />

    <div id="Info">
      <Icon icon="Info" width="77%" />
    </div>

    <BracketCloseH />
  </div>
</div>

<script define:vars={{ totalImages, instanceId }}>

	// Global Function: Get Current Index
	function getCurrentIndex(instanceSelector) {
		const imageContainers = document.querySelectorAll(
			`${instanceSelector} #ImageWrapper #ImageContainer`
		);

		if (!imageContainers || imageContainers.length === 0) {
			console.error(`No image containers found for selector: ${instanceSelector}`);
			return 1; // Return 1 as default if no containers are found
		}

		let visibleIndex = 1; // Default to 1 if none are visible

		imageContainers.forEach((container, index) => {
			// Check if the image is visible (opacity is 1, meaning it's active)
			if (window.getComputedStyle(container).opacity === '1') {
				visibleIndex = index; // Adjust because index is 0-based
				console.log(`current visible Index: ${visibleIndex}`);
				return;
			}
		});

		return visibleIndex;
	}

	document.addEventListener('astro:page-load', () => {
		const instanceSelector = `#GalleryElement-${instanceId}`; // Target this specific gallery element
		let currentIndex = 1; // Start from the first image
		const imageCount = totalImages;

		// Image Visibility
		function updateImageVisibility() {
			const imageContainers = document.querySelectorAll(`${instanceSelector} #ImageWrapper #ImageContainer`);

			// Error handling: Check if the image containers exist
			if (!imageContainers || imageContainers.length === 0) {
				console.error(`No image containers found for selector: ${instanceSelector}`);
				
				return;
			}

			// Update the visibility of images based on the current index
			imageContainers.forEach((div, index) => {
				div.style.opacity = index + 1 === currentIndex ? "1" : "0";
        div.style.filter = index + 1 === currentIndex ? "blur(0px)" : "blur(11px)";
			});
		}

		// Counter
		function updateCounter() {
			const counterContainer = document.querySelector(`${instanceSelector} #CounterContainer`);

			// Error handling: Check if counter container exists
			if (!counterContainer) {
				console.error(`Counter container not found for selector: ${instanceSelector}`);
				return;
			}

			counterContainer.textContent = `${currentIndex} / ${imageCount}`;
		}

		// A function to hide all descriptions
    function hideAllImageInfos() {
      const allImageInfos = document.querySelectorAll(`${instanceSelector} .ImageInfo`);
      // Error handling: Check if descriptions exist
      if (!allImageInfos || allImageInfos.length === 0) {
        console.error(`No ImageInfos found for selector: ${instanceSelector}`);
        return;
      }

      allImageInfos.forEach((ImageInfo) => {
        ImageInfo.style.opacity = '0';
        ImageInfo.style.backdropFilter = 'blur(0px)';
        // Optionally: Leave the blur unchanged if you don't want it to reset completely
      });

      ImageInfoVisible = false; // Reset the visibility state
    }

		// A function to toggle the visibility of the description for the current image
		function toggleImageInfoVisibility() {
			const activeImageInfo = document.querySelector(
				`${instanceSelector} #ImageWrapper #ImageContainer:nth-of-type(${currentIndex}) .ImageInfo`
			);


			// Error handling: Check if the active description elements exist
			if (!activeImageInfo) {
				console.error(`ImageInfo or not found for the current image.`);
				return;
			}

			if (ImageInfoVisible) {

              activeImageInfo.style.opacity = '0';
              activeImageInfo.style.backdropFilter = 'blur(0px)';
         

          } else {
            activeImageInfo.style.opacity = '1';
            activeImageInfo.style.backdropFilter = 'blur(22px)';

          }

          // Toggle the description visibility state
          ImageInfoVisible = !ImageInfoVisible;
		}

		// Arrow Function forward
		document.querySelector(`${instanceSelector} #ArrowWrapper div:nth-child(3)`)
			?.addEventListener("click", function () {
				currentIndex++;
				if (currentIndex > imageCount) currentIndex = 1; // Loop back to the first image if at the end

				updateCounter();
       
        hideAllImageInfos();
        setTimeout (() => {
          updateImageVisibility();
        }, 300);
        
			});

		// Arrow Function backward
		document.querySelector(`${instanceSelector} #ArrowWrapper div:nth-child(1)`)
			?.addEventListener("click", function () {
				currentIndex--;
				if (currentIndex < 1) currentIndex = imageCount; // Loop to the last image if at the beginning

				updateCounter();
				hideAllImageInfos(); // Hide descriptions when navigating
        setTimeout (() => {
          updateImageVisibility();
        }, 300);
       
			});

		// Add click event listener to the #Info div of this specific gallery
		const infoDiv = document.querySelector(`${instanceSelector} #Info`);
		if (infoDiv) {
			infoDiv.addEventListener('click', function () {
				toggleImageInfoVisibility();
			});
		} else {
			console.error(`Info div not found for selector: ${instanceSelector}`);
		}

		// Initially call functions to sync UI with the current state
		updateImageVisibility();
		updateCounter();
		hideAllImageInfos();
	});

</script>



  

	

<style>
  @import "../styles/global.css";

  .GalleryElementWrapper {
    display: grid;
    gap: 1%;
    height: fit-content;
  }

  /* Images Overlapping*/
  #ImageWrapper {
    position: relative;
    display: grid; /* Parent container needs to be relative */
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;
    height: fit-content;
    z-index: 2;
  }

  #ImageWrapper > div {
    grid-column: 1;
    grid-row: 1;
    transition: opacity 0.8s  ease-in-out, filter 0.5s ease-out ;
  }

  #ImageWrapper > div:nth-of-type(1) {
    opacity: 1; /* First image should be visible */
    filter: blur(0px);
  }

  #ImageWrapper > div:nth-of-type(2),
  #ImageWrapper > div:nth-of-type(3),
  #ImageWrapper > div:nth-of-type(4),
  #ImageWrapper > div:nth-of-type(5),
  #ImageWrapper > div:nth-of-type(6),
  #ImageWrapper > div:nth-of-type(7) {
    opacity: 0;
    filter: blur(11px);
  }

  #ImageContainer {
    position: relative;
    height: fit-content;
    box-shadow: 0px 0px 44px #988f821b;
    z-index: 1;
	  pointer-events: auto;
  }

  .ImageInfo {
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    width: 100%;
    height: 100%;
    z-index: 10; /* Ensure it appears above the image */
    display: flex;
    align-items: center;
    justify-content: center;
    pointer-events: none; /* Prevent interaction with the description if needed */
    background-color: var(--bg-color-trans); /* Example style */
     /* Start with no blur (initial state) */
    backdrop-filter: blur(0px);

    /* Add transition for backdrop-filter */
    transition: backdrop-filter ease-in-out 0.2s, opacity 0.2s ease-in-out;
  }


#GalleryDescriptionWrapper {
  display: grid;
  width: 100%;
  height: fit-content;
  grid-template-columns: 1.5ch minmax(min-content, 3fr) 3ch 2fr 3ch 3.5ch 1.5ch;
  justify-content: center;
  align-content: center;
}

.ImageInfoText{
    position: absolute;
    font-size: 0.8rem;
    width: 33ch;

    :nth-child(1){
      font-family: PowerGrotesk-Medium;
    }

    :nth-child(2){
      font-family: PowerGrotesk-Light;
      font-style: italic;
    }
  }

.DetailsWrapper {
  position: absolute;
  width: 100%;
  height: 100%;

  div {
    padding: 1rem;
    width: 27ch;
  }

  h1 {
    font-size: 0.6rem;
    font-family: PowerGrotesk-Medium;
  }

  h2 {
    font-size: 0.6rem;
    font-family: PowerGrotesk-Light;
  
  }

}


.DetailCollab {
  position: absolute;
  top: 0;
  left: 0;

}




.DetailMyPart {
  position: absolute;
  top: 0;
  right: 0;
  text-align: right;
}

.DetailClient {
  position: absolute;
  bottom: 0;
  left: 0;
}

.DetailTools{
  position: absolute;
  bottom: 0;
  right: 0;
  text-align: right;

}






  /* Arrows */

  #ArrowWrapper {
    display: grid;
    width: 100%;
    grid-template-columns: auto min-content auto;
    place-items: center;
  }

  #ArrowContainer {
    text-justify: center;
    text-align: center;
    width: stretch;
    pointer-events: auto;
    cursor: pointer;
    padding: 0.5rem 0.5%;
  }

  #CounterContainer {
    text-align: center;
    width: 5ch;
    font-size: 1rem;
    padding: 0.5rem 0.5%;
  }

  /* Text Elements */
  #TextContainer {
    width: auto;
    display: grid;
    place-items: center;
  }

  h1 {
    font-family: PowerGrotesk-Medium;
    font-weight: 600;
    font-style: normal;
    font-size: 1rem;
    letter-spacing: 0.7px;
    margin: 0px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  h2 {
    font-family: PowerGrotesk-Light;
    font-weight: 200;
    font-style: italic;
    font-size: 0.8rem;
    letter-spacing: 0.5px;
    margin: 0px;
  }

  #Info {
    display: grid;
    place-items: center;
	cursor: pointer; /* Ensure it looks clickable */
	pointer-events: auto;
	margin: 0 -5px;
  }

</style>
