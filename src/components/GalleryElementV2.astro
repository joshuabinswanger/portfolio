---
import BracketOpenH from "./BracketOpenH.astro";
import BracketCloseH from "./BracketCloseH.astro";
import BracketMiddleH from "./BracketMiddleH.astro";
import BracketOpenV from "./BracketOpenV.astro";
import BracketCloseV from "./BracketCloseV.astro";
import BracketMiddleV from "./BracketMiddleV.astro";
import Icon from "./Icon.astro";
import ImageElement from './ImageElement.astro';
import { getEntry } from 'astro:content';
import { imageConfig } from "astro:assets";
import "photoswipe/style.css";


// Get component props from Astro.props
const { project } = Astro.props;

interface Props {
  project: string;
}

// Fetch the specific gallery project by the project name (slug)
const galleryProject = await getEntry('gallery', Astro.props.project + "-gallery"); // Use the `project` prop

if (!galleryProject) {
  throw new Error(`Project with slug "${Astro.props.project + "-gallery"}" not found.`);
  
}

const bgcolor = galleryProject.data.bgcolor;

const imagesAmount = galleryProject.data.images.length;

const instanceId = Math.random().toString(36).slice(2, 11);  // Generate a unique ID for each instance


// format string credits
function formatString(input) {

  let formattedString = input
    .replace(/\*\*(.*?)\*\*/g, function(match, textBetweenStars) {
      // Wrap text between ** in <strong> tags
      return '<strong>' + textBetweenStars + '</strong>';
    })
    // Replace *break* with <br>
    .replace(/\*br\*/g, '<br>');

  return formattedString;

}


---

<div id={`GalleryElement-${instanceId}`} class:list={"GalleryElement"} data-instanceid={instanceId} data-bgcolor={bgcolor} data-imagesAmount={imagesAmount} data-galleryProject={galleryProject} >


  <div id="ImageWrapper">

    {galleryProject.data.images.map((image, index) => (

      <div id={`ImageContainer-${index + 1}`} class:list={["ImageContainer", ]} style={index === 0 ? "display: block" : "display: none"}>
      
        <div class:list={ "ImageInfo"}>

          {<div class:list={"ImageInfoWrapper"}>
            <div id="spacer"></div>
            <BracketOpenV strokewidth="0.5px"/>

              <div class:list={"ImageDescriptionWrapper"}>
                <Fragment set:html={formatString(image.description)} />
              </div>

            <BracketCloseV strokewidth="0.5px" />
            <div id="spacer"></div>
            <BracketOpenV strokewidth="0.5px"/>

              <div class:list={"ProjectInfoWrapper"}>
                <Fragment set:html={formatString(galleryProject.data.projectDescription) } />
              </div>

              <div class:list={"DetailsInfoWrapper"}>
                <Fragment set:html={formatString(galleryProject.data.credits)} />
              </div>

            <BracketCloseV strokewidth="0.5px" />
            <div id="spacer"></div>
          </div>}

        </div>

        <div class:list={"Filter"}></div>
        <div id="Image">
          <ImageElement
            project={project}
            imagePath={image.src}
            altText={image.alt}
            width="100%"
            loading={index === 0 ? "eager" : "lazy"}
          />
        </div>
      </div>
    ))}
  
  </div>



  <div id="GalleryDescriptionWrapper">
    <BracketOpenH />

    <div id="TextContainer">
      <div id="TextWrapper">
        <h1>{galleryProject.data.title}</h1>
        <h2>{galleryProject.data.subtitle}</h2>
      </div>
    </div>

   <BracketMiddleH />

    <div id="ArrowWrapper">
      <div id="ArrowContainer" class:list={["prevArrow"]}>&larr;</div>
      <div id="CounterContainer">1 / ${imagesAmount}</div>
      <div id="ArrowContainer" class:list={["nextArrow"]}>&rarr;</div>
    </div>

   <BracketMiddleH /> 

    <div id="Info">
      <Icon icon="Info" width="77%" />
    </div>

    <BracketCloseH />
  </div>

</div>

<script>

document.addEventListener('astro:page-load', () => {

  const galleryElements = document.querySelectorAll(".GalleryElement");

  let ImageInfoVisible = false;
//Functions

// Function: Get Current Index
function getCurrentIndex(instanceSelector) {
		const imageContainers = document.querySelectorAll(
			`${instanceSelector} #ImageWrapper .ImageContainer`
		);

		if (!imageContainers || imageContainers.length === 0) {
			console.error(`No image containers found for selector: ${instanceSelector}`);
			return 1; // Return 1 as default if no containers are found
		}

		let visibleIndex = 1; // Default to 1 if none are visible

		imageContainers.forEach((container, index) => {
			// Check if the image is visible (opacity is 1, meaning it's active)
			if (window.getComputedStyle(container).opacity === '1') {
				visibleIndex = index + 1; // Adjust because index is 0-based
				console.log(`current visible Index: ${visibleIndex}`);
				return;
			}
		});

		return visibleIndex;
	}


// Function: Image Visibility
function updateImageVisibility(instanceSelector, currentIndex, bgcolor) {
  const imageContainers = document.querySelectorAll(`${instanceSelector} #ImageWrapper .ImageContainer`);
  const imageFilters = document.querySelectorAll(`${instanceSelector} #ImageWrapper .Filter`);
  const imageTarget = document.querySelectorAll(`${instanceSelector} #ImageWrapper .ImageContainer  #Image`)

  // Error handling: Check if the image containers exist
  if (!imageContainers || imageContainers.length === 0) {
    console.error(`No image containers found for selector: ${instanceSelector}`);
    
    return;
  }

    // Error handling: Check if the image targets exist
  if (!imageTarget || imageTarget.length === 0) {
    console.error(`No image containers found for selector: ${instanceSelector}`);
    return;
  }


  // Update the visibility of images based on the current index: blur > switch > blur

    // Load new image
    imageContainers.forEach((div, index) => {
      if (index + 1 === currentIndex){
        div.style.display = "block";
      }

    });
 


    //Blur and Fade in Filter
    imageFilters.forEach((div, index) => {
      if (index + 1 === currentIndex || index + 1 === currentIndex + 1 || index + 1 === currentIndex - 1) {
        div.style.backdropFilter = "blur(5px)";
        div.style.backgroundColor = bgcolor;
       } 
    });


    //Fade in new Image
      setTimeout(() => {
        imageContainers.forEach((div, index) => {
        div.style.opacity = index + 1 === currentIndex ? "1" : "0";
        });
      }, 200);

    //Make Filter unblur and transparent
    setTimeout(() => {
    imageFilters.forEach((div, index) => {
      div.style.backdropFilter = index + 1 === currentIndex ? "blur(0px)" : "blur(5px)";
      div.style.backgroundColor = "#fbf9f400";
    });
  }, 333);


    // Set pointer events for current and next image
    setTimeout(() => {
      imageContainers.forEach((div, index) => {
        // Disable pointer events for current image (currentIndex)
        if (index + 1 === currentIndex) {
          div.style.pointerEvents = "auto";
        }

        // Disable pointer events for all other images
        else {
          div.style.pointerEvents = "none";
        }
      });
    }, 333);
    

    }

  


// Function: Counter
function updateCounter(instanceSelector, currentIndex, imageCount) {
  const counterContainer = document.querySelector(`${instanceSelector} #CounterContainer`);

  // Error handling: Check if counter container exists
  if (!counterContainer) {
    console.error(`Counter container not found for selector: ${instanceSelector}`);
    return;
  }

  counterContainer.textContent = `${currentIndex} / ${imageCount}`;
  console.log(`this is number ${currentIndex} in ${instanceSelector}`)
}


// Function: A function to hide all descriptions
function hideImageInfos(instanceSelector, currentIndex) {
  const ImageInfos = document.querySelector(`${instanceSelector} #ImageWrapper .ImageContainer:nth-of-type(${currentIndex}) .ImageInfo`);
  


  // Error handling: Check if descriptions exist
  if (!ImageInfos || ImageInfos.length === 0) {
    console.error(`No ImageInfos found for selector: ${instanceSelector}`);
    return;
  }

  //set current image info to 0 and blur(0px)
  ImageInfos.style.opacity = '0';
  ImageInfos.style.backdropFilter = 'blur(0px)';

  ImageInfoVisible = false; // Reset the visibility state
}



// Function:  A function to toggle the visibility of the description for the current image
function toggleImageInfoVisibility(instanceSelector, currentIndex) {

  const activeImageInfo = document.querySelector(
    `${instanceSelector} #ImageWrapper  .ImageContainer:nth-of-type(${currentIndex}) .ImageInfo`
  );

  // Error handling: Check if the active description elements exist
  if (!activeImageInfo) {
    console.error(`ImageInfo or not found for the current image.`);
    return;
  }
 

  if (ImageInfoVisible) {

          activeImageInfo.style.opacity = '0';
          activeImageInfo.style.backdropFilter = 'blur(0px)';
          console.log(`ImageInfo-${instanceSelector} turned off`);
      

      } else {

        activeImageInfo.style.opacity = '1';
        activeImageInfo.style.backdropFilter = 'blur(22px)';
        console.log(`ImageInfo-${instanceSelector} turned on`);

    }

      // Toggle the description visibility state
      ImageInfoVisible = !ImageInfoVisible;
}



// For Each Gallery

galleryElements.forEach((el) => {

  let currentIndex = 1; // Start from the first image

  const instanceId = el.getAttribute('data-instanceid');
  const instanceSelector = `#GalleryElement-${instanceId}`; // Target this specific gallery element
  console.log(`instanceSelector: ${instanceSelector}`); // Optional: to check if it works

  const imageCount = el.getAttribute('data-imagesAmount');
  console.log(`Number of images: ${imageCount}`); // Optional: to check if it works
  
  const bgcolor = el.getAttribute('data-bgcolor');
  console.log(`BG Color: ${bgcolor}`); // Optional: to check if it works
  

    // Arrow Function forward
    document.querySelector(`${instanceSelector} #ArrowWrapper div:nth-child(3)`)
      ?.addEventListener("click", function () {
        currentIndex = getCurrentIndex(instanceSelector);
        currentIndex++;
        if (currentIndex > imageCount) currentIndex = 1; // Loop back to the first image if at the end


            setTimeout (() => {
              
              updateImageVisibility(instanceSelector, currentIndex, bgcolor);

              updateCounter(instanceSelector, currentIndex, imageCount);

            }, 300);


            setTimeout (() => {

              hideImageInfos(instanceSelector, currentIndex);

            }, 600);
        
          });


    // Arrow Function backward
    document.querySelector(`${instanceSelector} #ArrowWrapper div:nth-child(1)`)
    ?.addEventListener("click", function () {
      currentIndex--;

  
        if (currentIndex < 1) currentIndex = Number(imageCount); // Loop to the last image if at the beginning

        console.log(`now this is the current Index: ${currentIndex}`)

        setTimeout (() => {
          console.log(`now this is the current Index in the timeout: ${currentIndex}`)
          
          updateImageVisibility(instanceSelector, currentIndex, bgcolor);

          updateCounter(instanceSelector, currentIndex, imageCount);

          }, 300);


        setTimeout (() => {

          hideImageInfos(instanceSelector, currentIndex);

        }, 600);

    });
      

    // Add click event listener to the #Info div of this specific gallery
      const infoDiv = document.querySelector(`${instanceSelector} #Info`);
      if (infoDiv) {
        infoDiv.addEventListener('click', function () {
          toggleImageInfoVisibility(instanceSelector, currentIndex);
        });
      } else {
        console.error(`Info div not found for selector: ${instanceSelector}`);
      }

    // Initially call functions to sync UI with the current state
    updateImageVisibility(instanceSelector, currentIndex, bgcolor);
    hideImageInfos(instanceSelector, currentIndex);
    updateCounter(instanceSelector, currentIndex, imageCount);
    

    // Make Description Bar visible
    const Description = document.querySelector(`${instanceSelector} #GalleryDescriptionWrapper`);
    Description.style.opacity = '1';


  //ForEachEnd
  });



});

</script>

<script>

import PhotoSwipeLightbox from 'photoswipe/lightbox';

const leftArrowSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 155 139" "width="39" height="35"><path d="m0 69 69 69 14-12-45-46h116V58H38l44-44L69 0 0 69Z" style="fill-rule:nonzero"/></svg>';
const CloseSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 139 139" "width="139" height="139"><path d="m69 83-56 55-13-12 56-57L0 14 13 0l56 56 56-56 13 14-55 55 55 57-13 12-56-55Z"/></svg>';



function isPhonePortrait() {
      return window.matchMedia('(max-width: 650px) and (orientation: portrait)').matches;
    }




document.addEventListener('astro:page-load', () => {

  
  let lightbox;

  const galleryElements = document.querySelectorAll(".GalleryElement");


  galleryElements.forEach((el) => {

    const instanceId = el.getAttribute('data-instanceid');
    const imageElements = document.querySelectorAll(`#GalleryElement-${instanceId} #ImageWrapper #Image a`);


    const options = {
      arrowPrevSVG: leftArrowSVGString,
      arrowNextSVG: leftArrowSVGString,
      closeSVG: CloseSVGString,

      initialZoomLevel: `fit`,
      bgOpacity: 0.95,
      zoom: false,
      
      // to apply styles just to this instance of PhotoSwipe
      mainClass: 'pswp--custom-bg pswp--custom-icon-colors',

      paddingFn: () => {
        if (isPhonePortrait()) {
          return { top: 0, bottom: 0, left: 10, right: 10  }  
        }
        else {
          return { top: 20, bottom: 40, left: 100, right: 100 }
        };
      },

      showHideAnimationType: 'fade',


      gallery: `#GalleryElement-${instanceId}`,
      children: imageElements,
      pswpModule: () => import('photoswipe'), // Import the PhotoSwipe module dynamically
    };
    
   
    const lightbox = new PhotoSwipeLightbox(options);

    lightbox.init(); // Initialize the lightbox


  }); 


});

document.addEventListener("astro:before-swap", () => {
  const lightbox = new PhotoSwipeLightbox;
      lightbox.destroy();
  });

</script>



  

	

<style>
  @import "../styles/global.css";


 


  .GalleryElement {
    display: grid;
    gap: 1%;
    height: fit-content;
  }

  /* Images Overlapping*/
  #ImageWrapper {
    position: relative;
    display: grid; /* Parent container needs to be relative */
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;
    height: fit-content;
    z-index: 2;
  }

  #ImageWrapper > div {
    grid-column: 1;
    grid-row: 1;
  }

  #ImageWrapper > div:nth-of-type(1) {
    opacity: 1; /* First image should be visible */
    backdrop-filter: blur(0px);
  }

  #ImageWrapper > div:nth-of-type(2),
  #ImageWrapper > div:nth-of-type(3),
  #ImageWrapper > div:nth-of-type(4),
  #ImageWrapper > div:nth-of-type(5),
  #ImageWrapper > div:nth-of-type(6),
  #ImageWrapper > div:nth-of-type(7) {
    opacity: 0;
    backdrop-filter: blur(11px);
  }

  .ImageContainer {
    position: relative;
    height: fit-content;
    box-shadow: 0px 0px 44px #988f821b;
    z-index: 1;
  }



  .Filter {
    position: absolute;
    top: 0;
    left: 0;
    background-color: #fbf9f400;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(0px);
    z-index: 11;
    transition: backdrop-filter ease-in-out 0.2s, background-color ease-in-out 0.2s;
    pointer-events: none;
  }




/*   Image Info */

.ImageInfo {
  position: absolute;
  top: 0;
  left: 0;
  opacity: 0;
  width: 100%;
  height: 100%;
  z-index: 10; /* Ensure it appears above the image */
  display: grid;
  justify-items: center;
  align-items: center;

  pointer-events: none; /* Prevent interaction with the description if needed */
  background-color: var(--bg-color-trans); /* Example style */
    /* Start with no blur (initial state) */
  backdrop-filter: blur(0px);

  /* Add transition for backdrop-filter */
  transition: backdrop-filter ease-in-out 0.2s, opacity 0.2s ease-in-out;

  font-size: 0.8rem;

  overflow: hidden;

  @media (--bp-mobile) {
    font-size: 0.6rem;
  }

  @media (--bp-desktop-wide) {
    font-size: 1rem;
    line-height: 1.33;
  }
}

.ImageInfoWrapper {
  display: grid;
  width: min(88%, 66ch);
  height: 90%;
  grid-template-rows: 1fr min-content  min-content  min-content 0.5fr min-content min-content min-content min-content 1fr;
  align-items: center;

}

.ImageDescriptionWrapper, .ProjectInfoWrapper, .DetailsInfoWrapper {

  width: 80%;           /* Ensure it takes full width */
  justify-self: center; /* Centers items horizontally */
 

  span {
    font-family: PowerGrotesk-Medium;
  }

  @media (--bp-mobile) {
    width: 85%;
    }

}





  /* GalleryDescription */

  #GalleryDescriptionWrapper {
  display: grid;
  width: 100%;
  opacity: 0;
  height: fit-content;
  grid-template-columns: 1.5ch minmax(min-content, 3fr) 3ch 2fr 3ch 3.5ch 1.5ch;
  justify-content: center;
  align-items: center;
  transition: opacity 1.5s ease-in;
}

  #ArrowWrapper {
    display: grid;
    width: 100%;
    grid-template-columns: auto min-content auto;
    place-items: center;
  }

  #ArrowContainer {
    text-justify: center;
    text-align: center;
    width: stretch;
    pointer-events: auto;
    cursor: pointer;
    padding: 0.5rem 0.5%;
  }

  #CounterContainer {
    text-align: center;
    width: 5ch;
    font-size: 1rem;
    padding: 0.5rem 0.5%;

    @media (--bp-mobile) {
      font-size: 0.8rem;
    }
  }

  /* Text Elements */
  #TextContainer {
    width: auto;
    display: grid;
    place-items: center;
  }

  h1 {
    font-family: PowerGrotesk-Medium;
    font-weight: 600;
    font-style: normal;
    font-size: 1rem;
    letter-spacing: 0.7px;
    margin: 0px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;

    @media (--bp-mobile) {
    font-size: 0.6rem;
    }
  }

  h2 {
    font-family: PowerGrotesk-Light;
    font-weight: 200;
    font-style: italic;
    font-size: 0.8rem;
    letter-spacing: 0.5px;
    margin: 0px;

    @media (--bp-mobile) {
    font-size: 0.6rem;
    }
  
  }

  #Info {
    display: grid;
    place-items: center;
	cursor: pointer; /* Ensure it looks clickable */
	pointer-events: auto;
	margin: 0 -5px;
  }

</style>
