---
import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';
import SquareBracket from './SquareBracket_H.astro';

import "../styles/global.css";

interface Props {
    margin_top?: string;
    width?: string;
    height?: string;
    aspectratio?: string;
    to: string;
    altText: string;
    imagePath: string;
    onhover_imagePath?: string;
    viewtransition_name?: string;
    
  };
  
// Get component props from Astro.props
const { margin_top = '0px', to, width = "100%", height = 'auto', aspectratio = 'auto', imagePath, onhover_imagePath, viewtransition_name } = Astro.props;

//Import all image paths to check against the passed in strings
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/**/*.{jpeg,jpg,png,gif,webp}');

// Check if the image exists and assign it to myImage
if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "src/assets/**/*.{jpeg,jpg,png,gif,webp}"`);
const myImage = images[imagePath]();
---
<div id="Image">
    <a href={to}>
      <Picture  
      src={myImage} 
      formats={['avif', 'webp']}
      widths={[120, 250, myImage.width / 4]}
      sizes={'(max-width: 360px) 120px, (max-width: 1600px) 250px,  ${myImage.width}px'}
      alt="empty" 
      style={`
      width: ${width}; 
      height: ${height}; 
      object-fit: cover; 
      aspect-ratio: ${aspectratio}
      `}>
    </a> 
</div>





<style define:vars={{margin_top }}>

@import "../styles/global.css";

/* Text Size*/
#content {
    padding: 3px 10px;
    display: flex;
    justify-content: center;
    font-size: calc(var(--font-size-dekstop) - 0.7rem + 0.7vw );
    letter-spacing: 0.8px;


    @media (--bp-mobile){
        font-size: calc(var(--font-size-mobile) - 0.2rem);
    }

    @media (--bp-tablet){
        font-size: calc(var(--font-size-tablet) - 0.2rem);
    }

    @media (--bp-desktop-wide){
        font-size: calc(var(--font-size-desktop-wide)  - 0.2rem);
    }
}


/*Fade */

.hidden{
  opacity: 0.22;
  filter: contrast(0.66) sepia(.8) blur(2px) grayscale(0.8);
  transition: all 1s ease;
  transform: translateY(10%);
}

.show {
  opacity: 1;
  filter:  contrast(1) brightness(1) sepia(0) blur(0px) grayscale(0);
  transform: translateY(0);
}



</style>

<script>


     // IntersectionObserver options
     let options = {
         rootMargin: "100px 0px -88px 0px",
     };
 
     // Define the IntersectionObserver
     const observer = new IntersectionObserver((entries) => {  
         entries.forEach((entry) => {
             console.log(entry);
             if (entry.isIntersecting) {
                 entry.target.classList.add("show");
             } else {
                 entry.target.classList.remove("show");
             }
         });
     }, options);
 
     // Select elements to observe and start observing them
     const fadeElements = document.querySelectorAll(".hidden");
     fadeElements.forEach((el) => observer.observe(el));
 
 </script>