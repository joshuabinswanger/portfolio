---
import type { ImageMetadata } from "astro";
import { Picture } from "astro:assets";
import SquareBracket from "./SquareBracket_H.astro";

import "../styles/global.css";

interface Props {
  margin_top?: string;
  width?: string;
  height?: string;
  aspectratio?: string;
  to: string;
  altText: string;
  imagePath: string;
  onhover_imagePath?: string;
  viewtransition_name?: string;
}

// Get component props from Astro.props
const {
  margin_top = "0px",
  to,
  width = "100%",
  height = "auto",
  aspectratio = "auto",
  imagePath,
  onhover_imagePath,
  viewtransition_name,
} = Astro.props;

//Import all image paths to check against the passed in strings
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/**/*.{jpeg,jpg,png,gif,webp}",
);

// Check if the image exists and assign it to myImage
if (!images[imagePath])
  throw new Error(
    `"${imagePath}" does not exist in glob: "src/assets/**/*.{jpeg,jpg,png,gif,webp}"`,
  );
const myImage = images[imagePath]();
---

<div id="Image">
  <Picture
    src={myImage}
    formats={["avif", "webp"]}
    widths={[120, 250, myImage.width / 4]}
    sizes={"(max-width: 360px) 120px, (max-width: 1600px) 250px,  ${myImage.width}px"}
    alt="empty"
    style={`
      width: ${width}; 
      height: ${height}; 
      aspect-ratio: ${aspectratio};
       object-fit: cover; 
      `}
  />

  <style>
    @import "../styles/global.css";

    img {
      display: flex;
      justify-content: center;
      align-items: center;
    }
  </style>

  <script>
    // IntersectionObserver options
    let options = {
      rootMargin: "100px 0px -88px 0px",
    };

    // Define the IntersectionObserver
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        console.log(entry);
        if (entry.isIntersecting) {
          entry.target.classList.add("show");
        } else {
          entry.target.classList.remove("show");
        }
      });
    }, options);

    // Select elements to observe and start observing them
    const fadeElements = document.querySelectorAll(".hidden");
    fadeElements.forEach((el) => observer.observe(el));
  </script>
</div>
