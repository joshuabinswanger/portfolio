---
import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';
import SquareBracket from './SquareBracket_H.astro';

import "../styles/global.css";

interface Props {
    grid_three: string;
    margin_top: string;
    to: string;
    title: string;
    tools: string;
    VerticalBar: string;
    altText: string;
    imagePath: string;
    onhover_imagePath: string;
    viewtransition_name: string;
    
  };
  
// Get component props from Astro.props
const { grid_three, margin_top, to, title, tools, VerticalBar, imagePath, onhover_imagePath, viewtransition_name } = Astro.props;

//Import all image paths to check against the passed in strings
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/**/*.{jpeg,jpg,png,gif,webp}');
if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "src/assets/**/*.{jpeg,jpg,png,gif,webp}"`);

//Check if VertBar
const VerticalBarClass = title && tools ? "yes" : "no";

---




<div id="Image_Wrapper" style="height:auto;">
  <div id="Spacer" style="pointer-events: none;">
    {/*this is an empty div*/}
  </div>

  <div id="ImageAndText_Wrapper" class:list={"hidden"} style="display: grid; pointer-events: auto;">
    <div id="GalleryImage">
       <a href={to}><Picture  src={images[imagePath]()} alt="empty" style="width: 100%; height: auto;"></a> 
    </div>

      
    <SquareBracket> 
      <div id="content"> 
        {title}<span id="VertBar" class:list={VerticalBarClass}>&emsp;|&emsp;</span>{tools} 
      </div>
    </SquareBracket>


  </div>

  <div id="Spacer" style="pointer-events: none;">
  {/*this is an empty div*/}
  </div>
</div>






<style define:vars={{ grid_three, margin_top }}>

@import "../styles/global.css";

#VertBar{
  display:none;
}

#VertBar.yes {
    display: block;
}
/* Text Size*/

#content {
    padding: 3px 10px;
    display: flex;
    justify-content: center;
    font-size: calc(var(--font-size-dekstop) - 0.7rem + 0.7vw );
    letter-spacing: 0.8px;


    @media (--bp-mobile){
        font-size: calc(var(--font-size-mobile) - 0.2rem);
    }

    @media (--bp-tablet){
        font-size: calc(var(--font-size-tablet) - 0.2rem);
    }

    @media (--bp-desktop-wide){
        font-size: calc(var(--font-size-desktop-wide)  - 0.2rem);
    }
}


/*Gallery Row Wrapper */

  #Image_Wrapper { 
    display: grid; 
    grid-template-columns: var(--grid_three); 
    margin-top: var(--margin_top);

    @media (--bp-mobile) {
      margin-top: 1rem;
    }
  }


/*Fade */

.hidden{
  opacity: 0.22;
  filter: contrast(0.66) sepia(.8) blur(2px) grayscale(0.8);
  transition: all 1s ease;
  transform: translateY(10%);
}

.show {
  opacity: 1;
  filter:  contrast(1) brightness(1) sepia(0) blur(0px) grayscale(0);
  transform: translateY(0);
}



</style>

<script>


     // IntersectionObserver options
     let options = {
         rootMargin: "100px 0px -88px 0px",
     };
 
     // Define the IntersectionObserver
     const observer = new IntersectionObserver((entries) => {  
         entries.forEach((entry) => {
             console.log(entry);
             if (entry.isIntersecting) {
                 entry.target.classList.add("show");
             } else {
                 entry.target.classList.remove("show");
             }
         });
     }, options);
 
     // Select elements to observe and start observing them
     const fadeElements = document.querySelectorAll(".hidden");
     fadeElements.forEach((el) => observer.observe(el));
 
 </script>