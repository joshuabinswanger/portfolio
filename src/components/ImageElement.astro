---
import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';

import "../styles/global.css";

interface Props {
    margin_top?: string;
    width?: string;
    height?: string;
    aspectratio?: string;
    loading?: 'eager' | 'lazy';
    to?: string;
    altText: string;
    imagePath: string;
    onhover_imagePath?: string;
    viewtransition_name?: string;
    
  };
  
// Get component props from Astro.props
const { margin_top = '0px', to, width = "100%", height = 'auto', aspectratio = 'auto', loading = 'lazy',altText = "Joshua Binswanger Scientific Illustration", imagePath, onhover_imagePath, viewtransition_name } = Astro.props;

//Import all image paths to check against the passed in strings
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/**/*.{jpeg,jpg,png,gif,webp}');

// Check if the image exists and assign it to myImage
if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "src/assets/**/*.{jpeg,jpg,png,gif,webp}"`);
const myImage = await images[imagePath]();
const imageUrl = myImage.default.src; // Use the actual image URL

// If the `to` prop is passed, it will override the imageUrl
const linkUrl = to ?? imageUrl;

---
<div id="Image">
    <a href={linkUrl}>
      <Picture  
      src={myImage.default} 
      formats={['avif', 'webp']}
      width={myImage.default.width / 3}
      densities={[1, 1.5, 2, 2.5, 3]}
      alt={altText} 
      loading={loading}
      style={`
      width: ${width}; 
      height: ${height}; 
      object-fit: cover; 
      aspect-ratio: ${aspectratio}
      `}>
    </a> 
</div>





<style define:vars={{margin_top }}>

@import "../styles/global.css";

/*Fade */

.hidden{
  opacity: 0.22;
  filter: contrast(0.66) sepia(.8) blur(2px) grayscale(0.8);
  transition: all 1s ease;
  transform: translateY(10%);
}

.show {
  opacity: 1;
  filter:  contrast(1) brightness(1) sepia(0) blur(0px) grayscale(0);
  transform: translateY(0);
}

#Image {
  pointer-events: none;
}


#Image a img {
  vertical-align: bottom; /* or middle, top, depending on the desired effect */
}


</style>