---
import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';
import Logo from './Logo.astro';
import SquareBracketV from './SquareBracket_V.astro';
import BracketOpenV from './BracketOpenV.astro';
import BracketMiddleV from './BracketMiddleV.astro';
import BracketCloseV from './BracketCloseV.astro';
import "../styles/global.css";
import { Image } from "astro:assets"
import RhizomLogo from "../assets/Rhizome_Logo_208h.jpg"
import JoshLogo from "../assets/joshuabinswanger_tempLogo.png"


const logoPath = "/assets/Rhizome_Test2.riv";

// Personal?


interface Props {
  personal?: boolean;
}

const { personal = false } = Astro.props;

// Determine the correct href based on the personal prop
const galleryHref = personal ? "/personal/" : "/";
const projectsHref = personal ? "/personal/projects/" : "/projects/";
const infoHref = personal ? "/personal/info/" : "/info/";

console.log(projectsHref)

// Determine the correct text content based on the personal prop
const galleryText = personal ? "Gallery" : "Portfolio";
const projectsText = personal ? "Projects" : "Projects";
const infoText = personal ? "Info" : "Info";

// Determine which logo to use based on the personal prop
const currentLogo = personal ? JoshLogo : RhizomLogo;
const logoAlt = personal ? "Joshua Binswanger Logo" : "Rhizom Logo";

---

<nav id="NavBarDesktop" transition:persist>

  <a 
    id="Logo" 
    href={galleryHref} {/* Use the determined href here */}
    data-href={galleryHref} {/* Update data-href as well if used for animation */}
    class:list={["animation"]} 
    data-animation="out">
    
    <Image src={currentLogo} id="Image" alt={logoAlt} loading="eager">
  </a>

  <div id="MainWrapper">

    <BracketOpenV />

    <a
    id="portfolio"
    class:list={["main-button", "button", "animation"]}
    href={galleryHref} {/* Use the determined href here */}
    data-href={galleryHref} {/* Update data-href as well if used for animation */}
    data-animation="out">

    {galleryText} {/* Use the determined text content here */}

  </a>


    <BracketMiddleV />


    {!personal && (
      <>

        <!-- Projects submenu -->
        <a
          id="projects"
          class:list={["main-button", "button", "animation"]}
          href={projectsHref}
          data-href={projectsHref}
          data-animation="out">
          {projectsText}
        </a>

        <BracketMiddleV />
      </>
    )}


      <a
      id="info"
      class:list={["main-button", "button", "animation"]}
      href={infoHref} {/* Use the determined href here */}
      data-href={infoHref} {/* Update data-href as well if used for animation */}
      data-animation="out">

      {infoText} {/* Use the determined text content here */}

    </a>

    <BracketCloseV />
  </div>
</nav>


<script>
  import { navigate } from 'astro:transitions/client';

  // Update visual state (add/remove active class)
  function updateAnimationState(buttons) {
    setTimeout(() => {
      buttons.forEach(btn => {
        if (btn.getAttribute('data-animation') === "in") {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
    }, 500);
  }

  // Handle button click for all buttons 
  function handleButtonClick(clickedBtn, allButtonsNodeList) {
    // Convert NodeList to Array for easier filtering if needed
    const allButtons = Array.from(allButtonsNodeList); 
    const mainButtons = allButtons.filter(btn => btn.id !== 'Logo'); // Exclude logo for some logic

    // Special check: if clicked is Logo
    if (clickedBtn.id === "Logo") {
      const portfolioBtn = allButtons.find(btn => btn.id === 'portfolio'); // Find portfolio among all buttons

      // Deactivate all MAIN buttons
      mainButtons.forEach(btn => {
        btn.setAttribute('data-animation', 'out');
      });

      // Activate portfolio button
      if (portfolioBtn) {
        portfolioBtn.setAttribute('data-animation', 'in');
      }
      
      // Ensure logo itself remains visually 'out' (or handle its state if it needs one)
      clickedBtn.setAttribute('data-animation', 'out'); 

    } else { // Clicked a main button (portfolio, projects, info)
      
      // Only proceed if the clicked button is currently "out"
      if (clickedBtn.getAttribute('data-animation') === "out") {
        // Deactivate other MAIN buttons that are currently "in"
        mainButtons.forEach(btn => {
          if (btn !== clickedBtn && btn.getAttribute('data-animation') === "in") {
            btn.setAttribute('data-animation', "out");
          }
        });
        // Activate the clicked button
        clickedBtn.setAttribute('data-animation', "in");
      }
    }

    // --- IMPORTANT ---
    // Update the visual state for ALL buttons AFTER any changes
    updateAnimationState(allButtonsNodeList); 
    // --- IMPORTANT ---

    // Navigation is handled by the browser for <a> tags with Astro View Transitions
  }

  // Attach event listeners to buttons 
  function createEventListeners(buttons) {
    buttons.forEach(btn => {
       // Basic check to prevent adding multiple listeners if page-load fires rapidly
       if (!btn.hasClickListener) {
            btn.addEventListener('click', event => {
                // Let Astro/browser handle navigation, just update state
                // event.preventDefault(); // Usually NOT needed
                
                // Pass event.currentTarget and the NodeList the listener was added to
                handleButtonClick(event.currentTarget, buttons); 
            });
            btn.hasClickListener = true; // Mark listener as added
        }
    });
  }

  // On page load, update visual state and attach click listeners
  document.addEventListener("astro:page-load", () => {

    const navBar = document.getElementById("NavBarDesktop");
    if (!navBar) return;

    // Select the Logo (#Logo) AND the direct children 'a.animation' of MainWrapper
    const allNavButtons = navBar.querySelectorAll('#Logo, #MainWrapper > a.animation'); 

    if (allNavButtons.length === 0) return;



     // --- START: URL Matching Logic (copied from previous answer, ensure it uses allNavButtons) ---

     let isActiveAlreadySet = false;

     //check if already an active a element
     allNavButtons.forEach(btn => {

       if (btn.getAttribute('data-animation') === 'in' || btn.classList.contains('active')) { // Check class too
         isActiveAlreadySet = true;
       }

     });

     if (!isActiveAlreadySet) {
       const currentPath = window.location.pathname;
       let foundMatch = false;
       let portfolioButton = null; 

      // Determine if we're on personal site by checking URL
      const isPersonalSite = currentPath.startsWith('/personal');

      console.log(`Are we on personl site?: ${isPersonalSite}`);

       allNavButtons.forEach(btn => {
         const buttonHref = btn.getAttribute('data-href');

          // Set portfolio button reference based on site type
          if ((isPersonalSite && buttonHref === '/personal/') || (!isPersonalSite && buttonHref === '/')) {
             portfolioButton = btn; 
         }

         //check if we pressed on the same button
         if (buttonHref === currentPath) {
           allNavButtons.forEach(otherBtn => otherBtn.setAttribute('data-animation', 'out')); 
           btn.setAttribute('data-animation', 'in');
           foundMatch = true;
         } 
       });

       //if pressed on a different route
       if (!foundMatch && currentPath !== '/' && portfolioButton) {
          allNavButtons.forEach(btn => btn.setAttribute('data-animation', 'out')); 
          portfolioButton.setAttribute('data-animation', 'in'); 
       }
     }
    // --- END: URL Matching Logic ---


    // Initial visual state update based on URL matching or persisted state
    updateAnimationState(allNavButtons); 

    // Attach listeners to ALL selected buttons (Logo + Main buttons)
    createEventListeners(allNavButtons); 
  });

</script>

<style>
@import "../styles/global.css";

#NavBarDesktop {
  position: sticky;
  height: min-content;
  display: grid;
  justify-items: center;
  grid-template-rows: 40px 1fr;
  top: var(--padding-top-desktop);
  row-gap: 4px;

  @media (--bp-mobile) {
    display: none;
  }
  @media (--bp-tablet) {
    top: var(--padding-top-tablet);
    grid-template-rows: 36px 1fr;
  }
  @media (--bp-desktop-wide) {
    top: var(--padding-top-desktop-wide);
    grid-template-rows: 40px 1fr;
  }
}

* {
  letter-spacing: 0.8px;
}

#Logo {
  display: block;
  height: 100%;

  @media (--bp-mobile){

    margin-top: 32px;
    display: block;
    height: 36px;
    width: 144px;
    padding-left: 2px;

  }
}


#Image {
  height: min-content;
  width: 100%;
}

#MainWrapper {
  width: 100%;
  display: grid;
  /* Restored original grid rows for 3 main items */
  grid-template-rows: 0 48px 0 48px 0 48px 0;
  transition: grid-template-rows 0.6s ease; /* Changed from columns to rows */

  @media (--bp-tablet) {
    grid-template-rows: 0 40px 0 40px 0 40px 0;
  }
}

/* Removed #MainWrapper:has(#archive-main.active) style */

.MenuItems {
  height: min-content;
  font-family: PowerGrotesk-Light;
  font-weight: 200;
}

.button {
  height: 100%;
  color: black;
  align-content: center;
  align-items: center;
  z-index: 1001;
  transition: color 0.3s ease 0.15s;
  position: relative; /* Needed for ::before positioning */
  display: flex; /* Ensure flex properties work */
  justify-content: center; /* Center text horizontally */
  align-items: center; /* Center text vertically */
}

a {
  text-decoration: none;
  color: inherit;
  background: none;
  border: none;
  pointer-events: auto;
  font-size: var(--font-size-dekstop-h1);
  margin: 0;
  height: 100%;
  /* Moved display flex properties to .button */


  @media (--bp-mobile) {
    font-size: var(--font-size-mobile-h1);
  }
  @media (--bp-tablet) {
    font-size: var(--font-size-tablet-h1);
  }
  @media (--bp-desktop-wide) {
    font-size: var(--font-size-desktop-wide-h1);
  }
}

/* The ::before pseudo-element creates a black bar that slides in from the bottom */
.button::before {
  content: "";
  position: absolute;
  left: 0;
  bottom: 0; /* Align to bottom */
  width: 0%;
  height: 100%; /* Cover full height */
  background-color: black;
  transition: width 0.6s ease;
  z-index: -1;

}

/* When active, change text color and expand the black bar */
.button.active {
  color: var(--bg-color);
}
.button.active::before {
  width: 100%;
}

/* Removed all styles related to #archive, #archive-select, and .archive-subitems */

</style>