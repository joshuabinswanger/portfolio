---
import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';
import Logo from './Logo.astro';
import SquareBracketV from './SquareBracket_V.astro';
import BracketOpenV from './BracketOpenV.astro';
import BracketMiddleV from './BracketMiddleV.astro';
import BracketCloseV from './BracketCloseV.astro';
import "../styles/global.css";
import RhizomLogo from "../assets/Logo_BGColor.png"

const logoPath = "/assets/Rhizome_Test2.riv";

import Index from './Index.astro';
---

<nav id="NavBarDesktop" transition:persist>
  <div id="MainWrapper">

  <Logo />

    <BracketOpenV />

    <a id="portfolio" href="/" class:list={["MenuItems button animation"]} data-href="/" data-animation="in">
      Portfolio
    </a>

    <BracketMiddleV />

    <!-- For items with submenus, wrap them in a container -->
    <div id="archive">
      <a id="archive-main" href="/archive-gallery" class:list={["MenuItems button animation"]} data-href="/archive-gallery" data-animation="out">
        Archive
      </a>
      <div id="archive-select">
        <a id="archive-gallery" class:list={["archive-subitems button"]} href="/archive-gallery" data-href="/archive-gallery" data-animation="out">
          Gallery
        </a>
        <a id="archive-project-list" class:list={["archive-subitems button"]} href="/archive-project-list" data-href="/archive-project-list" data-animation="out">
          List
        </a>
        <a id="archive-projects" class:list={["archive-subitems button"]} href="/archive-projects" data-href="/archive-projects" data-animation="out">
          Projects
        </a>
      </div>
    </div>

    <BracketMiddleV />

    <a href="/info" class:list={["MenuItems button animation"]} data-href="/info" data-animation="out">
      Information
    </a>

    <BracketCloseV />
  </div>
</nav>

<script>

  // Update visual state (for example, adding an "active" class)
  function updateAnimationState(mainButtons) {
    setTimeout(() => {
      mainButtons.forEach(btn => {
        if (btn.getAttribute('data-animation') === "in") {
          btn.classList.add('active');
        } 
        else {
          btn.classList.remove('active');
        }
      });
    }, 300);

  }


  //handle Button click function
  function handleButtonClick(clickedBtn, buttons) {

    const archiveSubitems = document.querySelectorAll('.archive-subitems');

    // Special branch for the Archive main button:
    if (clickedBtn.id === "archive-main") {
      // Set the Archive main button active
      clickedBtn.setAttribute('data-animation', "in");

      // Set all buttons (in this group) that are NOT the Archive main button to "out"
      buttons.forEach(btn => {
        if (btn.id !== "archive-main") {
          btn.setAttribute('data-animation', "out");
        }
      });
      
      // Update the archive subitems: force the "Gallery" subitem active, others inactive.
      archiveSubitems.forEach(btn => {
        if (btn.id === "archive-gallery") {
          btn.setAttribute('data-animation', "in");
        } else {
          btn.setAttribute('data-animation', "out");
        }
      });



      return; // exit so the rest of the function doesnâ€™t run
    }

    // Special check: if the clicked element is the logo container, force Portfolio active.
    else if (clickedBtn.id === "Logo") { 
      const portfolioBtn = Array.from(buttons).find(btn => btn.id === "portfolio");
      buttons.forEach(btn => {
        if (btn.id !== "portfolio" && btn.id !== clickedBtn.id) {
          btn.setAttribute('data-animation', "out");
        }
      });
      portfolioBtn.setAttribute('data-animation', "in");
      clickedBtn.setAttribute('data-animation', "in");
    } 
    
    else if (clickedBtn.id === "archive-gallery" || clickedBtn.id === "archive-project-list" || clickedBtn.id === "archive-projects"){
        archiveSubitems.forEach(btn => {
        if (clickedBtn === btn) {
          btn.setAttribute('data-animation', "in");
        } else {
          btn.setAttribute('data-animation', "out");
        }
      });
    }

    else {
      const currentAnimation = clickedBtn.getAttribute('data-animation');
      if (currentAnimation === "out") {
        buttons.forEach(btn => {
          if (btn !== clickedBtn && btn.getAttribute('data-animation') === "in") {
            btn.setAttribute('data-animation', "out");
          }
        });
        clickedBtn.setAttribute('data-animation', "in");
      }
    }
  };



  // Create event listeners on each button
  function createEventListeners(mainButtons) {
    mainButtons.forEach(btn => {
      btn.addEventListener('click', (event) => {
        // Use event.currentTarget to get the clicked button
        handleButtonClick(event.currentTarget, mainButtons);
      });
    });
  }

  // On page load, update animation state and attach click listeners.
  document.addEventListener("astro:page-load", () => {
    const navBar = document.getElementById("NavBarDesktop");
    const mainButtons = navBar.querySelectorAll('.button');
    console.log(mainButtons)
    
    updateAnimationState(mainButtons);
    createEventListeners(mainButtons);


  });

</script>


<style>
@import "../styles/global.css";

#NavBarDesktop {
  position: sticky;
  display: grid;
  justify-items: center;
  grid-auto-rows: auto;
  top: var(--padding-desktop);

  @media (--bp-mobile) {
    display: none;
  }
  @media (--bp-tablet) {
    top: var(--padding-tablet);
  }
  @media (--bp-desktop-wide) {
    top: var(--padding-desktop-wide);
  }
}

* {
  letter-spacing: 0.8px;
}

#Logo-Wrapper {
    z-index: 1003;
    width: 100%;
    aspect-ratio: auto;
    


@media (--bp-mobile){


  }
}

#Logo {
  display: block;
  height: 100%;
}


#Picture{
  width: 100%;
  height: auto;
}

#MainWrapper {
  width: 100%;
  display: grid;
  grid-template-rows: min-content 0 min-content 0 min-content 0 min-content 0;
}

.MenuItems {
  height: min-content;
  font-family: PowerGrotesk-Light;
  font-weight: 200;
} 

.button {
  height: 3rem;
  align-content: center;
  align-items: center;
  z-index: 1001;

}

a {
  text-decoration: none;
  color: inherit;
  background: none;
  border: none;
  pointer-events: auto;
  font-size: var(--font-size-dekstop-h1);
  margin: 0;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
 

  @media (--bp-mobile) {
    font-size: var(--font-size-mobile-h1);
  }
  @media (--bp-tablet) {
    font-size: var(--font-size-tablet-h1);
  }
  @media (--bp-desktop-wide) {
    font-size: var(--font-size-dekstop-h1);
  }
}



/* The ::before pseudo-element creates a black bar that slides in from the bottom */
.button::before {
  content: "";
  position: absolute;
  left: 0;
  width: 0%;
  height: 3rem;
  background-color: black;
  transition: width 0.6s ease;
  z-index: -1;
}

/* When active, change text color and expand the black bar */
.button.active {
  color: var(--bg-color);
}
.button.active::before {
  width: 100%;
}

#archive {
  display: grid;
  width: 100%;
  height: 3rem;
  grid-template-rows: 1fr auto;
  align-items: start;
  transition: height 0.75s ease;
  overflow: hidden;
}

#archive-select {
  display: grid;
  height: 6.5rem;
  justify-content: center;
  align-content: start;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr 1fr 1fr;
  width: 100%;
  margin-top: 0.25rem;
  margin-bottom: 1rem;

}

#archive:has(a.active)  {
  height: 9.5rem;
}

.archive-subitems {
  font-size: 11px;
  cursor: pointer;
  padding: 0.25rem 0;
  height: 1.25rem;
}

/* The ::before pseudo-element creates a black bar that slides in from the bottom */
.archive-subitems::before {
  content: "";
  position: absolute;
  left: 0;
  width: 0%;
  height: 2rem;
  background-color: black;
  transition: width 0.6s ease;
  z-index: -1;
}

.archive-subitems.active {
  color: var(--bg-color);
}
.archive-subitems.active::before {
  width: 100%;
}
</style>
