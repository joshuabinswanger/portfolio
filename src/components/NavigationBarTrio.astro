---
import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';
import Logo from './Logo.astro';
import SquareBracketV from './SquareBracket_V.astro';
import BracketOpenV from './BracketOpenV.astro';
import BracketMiddleV from './BracketMiddleV.astro';
import BracketCloseV from './BracketCloseV.astro';
import "../styles/global.css";
import RhizomLogo from "../assets/Logo_BGColor.png"

const logoPath = "/assets/Rhizome_Test2.riv";

import Index from './Index.astro';
---

<nav id="NavBarDesktop" transition:persist>
  <div id="MainWrapper">

  <Logo />

    <BracketOpenV />

    <a id="portfolio" href="/" class:list={["MenuItems main-button animation"]} data-href="/" data-animation="in">
      <p>Portfolio</p>
    </a>

    <BracketMiddleV />

    <!-- For items with submenus, wrap them in a container -->
    <div id="archive">
      <a href="/archive-gallery" class:list={["MenuItems main-button animation"]} data-href="/archive-gallery" data-animation="out">
        <p>Archive</p>
      </a>
      <div id="archive-select">
        <a class:list={["archive-subitems"]} href="/archive-gallery" data-href="/archive-gallery" >
          Gallery
        </a>
        <a class:list={["archive-subitems"]} href="/archive-project-list" data-href="/archive-project-list">
          List
        </a>
        <a class:list={["archive-subitems"]} href="/archive-projects" data-href="/archive-projects">
          Projects
        </a>
      </div>
    </div>

    <BracketMiddleV />

    <a href="/info" class:list={["MenuItems main-button animation"]} data-href="/info" data-animation="out">
      <p>Information</p>
    </a>

    <BracketCloseV />
  </div>
</nav>

<script>
  import { navigate } from 'astro:transitions/client';

  // Update visual state (for example, adding an "active" class)
  function updateAnimationState(buttons) {
    setTimeout(() => {
      buttons.forEach(btn => {
        if (btn.getAttribute('data-animation') === "in") {
          btn.classList.add('active');
        } 
        else {
          btn.classList.remove('active');
        }
      });
    }, 600);
  }

  function handleButtonClick(clickedBtn, buttons) {
  console.log("handleButtonClick invoked");
  console.log("Clicked element id:", clickedBtn.id, "data-animation:", clickedBtn.getAttribute('data-animation'));

  // Special check: if the clicked element is the logo container, force Portfolio active.
  if (clickedBtn.id === "Logo") { // or "logo-container" if that's the actual id
    console.log("Clicked element is recognized as the Logo");
    // Instead of relying on a reference, find the portfolio button from the list by ID:
    const portfolioBtn = Array.from(buttons).find(btn => btn.id === "portfolio");
    if (!portfolioBtn) {
      console.error("Portfolio button not found!");
    } else {
      console.log("Portfolio button found with id:", portfolioBtn.id, "current data-animation:", portfolioBtn.getAttribute('data-animation'));
    }

    buttons.forEach(btn => {
      console.log("Examining button id:", btn.id, "current data-animation:", btn.getAttribute('data-animation'));
      if (btn.id !== "portfolio" && btn.id !== clickedBtn.id) {
        console.log("Setting button id", btn.id, "data-animation to 'out'");
        btn.setAttribute('data-animation', "out");
      } else {
        console.log("Skipping button id", btn.id, "because it is either the portfolio or the clicked logo");
      }
    });

    console.log("Setting portfolio button's data-animation to 'in'");
    portfolioBtn.setAttribute('data-animation', "in");

    console.log("Setting clicked logo's data-animation to 'in'");
    clickedBtn.setAttribute('data-animation', "in");

  } else {
    const currentAnimation = clickedBtn.getAttribute('data-animation');
    console.log("Non-logo element clicked with current data-animation:", currentAnimation);

    if (currentAnimation === "out") {
      console.log("Button is marked 'out'; updating other buttons marked 'in' to 'out'");
      buttons.forEach(btn => {
        if (btn !== clickedBtn) {
          console.log("Examining button id:", btn.id, "current data-animation:", btn.getAttribute('data-animation'));
          if (btn.getAttribute('data-animation') === "in") {
            console.log("Setting button id", btn.id, "data-animation to 'out'");
            btn.setAttribute('data-animation', "out");
          } else {
            console.log("No change for button id", btn.id, "because its data-animation is not 'in'");
          }
        }
      });
      console.log("Setting clicked button's data-animation to 'in'");
      clickedBtn.setAttribute('data-animation', "in");
    } else {
      console.log("Clicked button is already 'in'; no changes needed.");
    }
  }

  // Log the final state of all buttons after processing
  console.log("Final state of all buttons:");
  buttons.forEach(btn => {
    console.log("Button id:", btn.id, "data-animation:", btn.getAttribute('data-animation'));
  });
}



  // Create event listeners on each button
  function createEventListeners(buttons) {
    buttons.forEach(btn => {
      btn.addEventListener('click', (event) => {
        // Use event.currentTarget to get the clicked button
        handleButtonClick(event.currentTarget, buttons);
      });
    });
  }

  // On page load, update animation state and attach click listeners.
  document.addEventListener("astro:page-load", () => {
    const navBar = document.getElementById("NavBarDesktop");
    const mainButtons = navBar.querySelectorAll('.animation');
    console.log(mainButtons)
    
    updateAnimationState(mainButtons);
    createEventListeners(mainButtons);


  });

  // Archive subitems onchange event (if applicable)
  document.addEventListener("astro:page-load", () => {
    const navBar = document.getElementById("NavBarDesktop");
    const archiveSubitems = navBar.querySelector('.archive-subitems');
    if (archiveSubitems) {
      archiveSubitems.onchange = (event) => {
        const href = event.target.value;
        navigate(href);
      };
    }
  });
</script>


<style>
@import "../styles/global.css";

#NavBarDesktop {
  position: sticky;
  display: grid;
  justify-items: center;
  grid-auto-rows: auto;
  top: var(--padding-desktop);

  @media (--bp-mobile) {
    display: none;
  }
  @media (--bp-tablet) {
    top: var(--padding-tablet);
  }
  @media (--bp-desktop-wide) {
    top: var(--padding-desktop-wide);
  }
}

* {
  letter-spacing: 0.8px;
}

#Logo-Wrapper {
    z-index: 1003;
    width: 100%;
    aspect-ratio: auto;
    


@media (--bp-mobile){


  }
}

#Logo {
  display: block;
  height: 100%;
}


#Picture{
  width: 100%;
  height: auto;
}

#MainWrapper {
  width: 100%;
  display: grid;
  grid-template-rows: min-content 0 min-content 0 min-content 0 min-content 0;
}

.MenuItems {
  height: min-content;
  font-family: PowerGrotesk-Light;
  font-weight: 200;
}

.main-button {
  height: 2.5rem;
  align-content: center;
  align-items: center;
  z-index: 1001;

}

a {
  text-decoration: none;
  color: inherit;
  background: none;
  border: none;
  pointer-events: auto;
  font-size: var(--font-size-dekstop-h1);
  margin: 0;
  text-align: center;
  align-content: center;
  align-items: center;

  @media (--bp-mobile) {
    font-size: var(--font-size-mobile-h1);
  }
  @media (--bp-tablet) {
    font-size: var(--font-size-tablet-h1);
  }
  @media (--bp-desktop-wide) {
    font-size: var(--font-size-dekstop-h1);
  }
}

p {
  margin: 0;
  padding: 0;
  align-content: center;
  align-items: center;
}

/* The ::before pseudo-element creates a black bar that slides in from the bottom */
.main-button::before {
  content: "";
  position: absolute;
  left: 0;
  width: 0%;
  height: 2.55rem;
  background-color: black;
  transition: width 0.75s ease;
  z-index: -1;
}

/* When active, change text color and expand the black bar */
.main-button.active {
  color: var(--bg-color);
}
.main-button.active::before {
  width: 100%;
}

#archive {
  display: grid;
  width: 100%;
  grid-template-rows: 1fr min-content;
  align-items: center;
}

#archive-select {
  display: none;
  justify-content: center;
  align-content: center;
  grid-template-rows: 1fr 1fr 1fr;
  width: 100%;
  height: 100%;
  margin-top: 1rem;
  margin-bottom: 1rem;
}

.archive-subitems {
  font-size: 11px;
  cursor: pointer;
  padding: 0.25rem 0;
  width: 100%;
  height: 100%;
}
</style>
