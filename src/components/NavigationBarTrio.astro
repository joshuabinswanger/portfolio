---
import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';
import Logo from './Logo.astro';
import SquareBracketV from './SquareBracket_V.astro';
import BracketOpenV from './BracketOpenV.astro';
import BracketMiddleV from './BracketMiddleV.astro';
import BracketCloseV from './BracketCloseV.astro';
import "../styles/global.css"

const logoPath = "/assets/Rhizome_Test2.riv";

import Index from './Index.astro';

---



<nav id="NavBar" transition:persist>

  <div id="MainWrapper">
    <div style="pointer-events: auto;">
      <Logo />
    </div>

    <BracketOpenV />

      <a href="/" class:list={["MenuItems main-button"]} data-href="/">
        <p>Portfolio</p>
      </a>

    <BracketMiddleV />

    
      <!-- For items with submenus, wrap them in a container -->
      <div  id="archive" >

        <a href="/archive-gallery" class:list={["MenuItems main-button"]} data-href="/archive-gallery">
          <p>Archive</p>
        </a>
        <div id="archive-select">
          <a 
            class:list={["archive-subitems"]} 
            href="/archive-gallery"
            data-href="/archive-gallery">
            Gallery
          </a>
          <a 
            class:list={["archive-subitems"]} 
            href="/archive-project-list"
            data-href="/archive-project-list">
            List
          </a>
          <a 
            class:list={["archive-subitems"]} 
            href="/archive-projects"
            data-href="/archive-projects">
            Projects
          </a>
        </div>
      </div>

    <BracketMiddleV />

      <a href="/info" class:list={["MenuItems main-button"]} data-href="/info">
        <p>Information</p>
      </a>

    <BracketCloseV />
  </div>

</nav>


<script>

</script>

<style>
@import "../styles/global.css";

#NavBar {
	position: sticky;
  display: grid;
  justify-items: center;
  grid-auto-rows: auto;
  top: var(--padding-desktop);

		@media (--bp-mobile) {
			display: none;
		}

    @media (--bp-tablet) {
    top: var(--padding-tablet);
  	}

		@media (--bp-desktop-wide) {
      top: var(--padding-desktop-wide);
		}

}

* {
  letter-spacing: 0.8px;
}

#MainWrapper {
  width: 100%;
  display: grid;
  grid-template-rows: min-content 0 min-content 0 min-content 0 min-content 0;
}

.MenuItems {
  height: min-content;
  font-family: PowerGrotesk-Light;
  font-weight: 200;
  
}
.main-button {
  height: 2.5rem;
  align-content: center;
}

a {
  text-decoration: none; /* Removes underline */
  color: inherit; /* Inherits the color from the parent element */
  background: none; /* Removes background if any */
  border: none; /* Removes border if any */
  pointer-events: auto;
  font-size: var(--font-size-dekstop-h1);
  margin: 0px;
  text-align: center;

  @media (--bp-mobile) {
    font-size: var(--font-size-mobile-h1);
  }

  @media (--bp-tablet) {
    font-size: var(--font-size-tablet-h1);
  }

  @media (--bp-desktop-wide) {
    font-size:  var(--font-size-dekstop-h1);
    
  }
} 

p {
  height: 100%;
  margin: 0;
  padding: 0;
  align-content: center;
}
.main-button::before {
  content: "";
  position: absolute;
  left: 0;
  width: 0%;
  height: 2.55rem;
  background-color: black;
  /* Transition for the bar sliding in */
  transition: width 0.75s ease;
  z-index: -1;
}

/* When active, change text color and animate the black bar into place */
.main-button.active {
  color: var(--bg-color);
}

.main-button.active::before {
  width: 100%;
}

#archive {
  display: grid;
  width: 100%;
  grid-template-rows: 1fr  min-content;
  align-items: center;
}

#archive-main {
}

#archive-select {
  display: none;
  justify-content: center;
  align-content: center;
  grid-template-rows: 1fr 1fr 1fr;
  width: 100%;
  height: 100%;
  margin-top: 1rem;
  margin-bottom: 1rem;
}


/* Archive subitems can be styled separately */
.archive-subitems {
  font-size: 11px;
  cursor: pointer;
  padding: 0.25rem 0;
  width: 100%;
  height: 100%;
}





</style>


<script>
  import { navigate } from 'astro:transitions/client';

// AFTER-SWAP: Update the active state based on the current URL
document.addEventListener("astro:after-swap", () => {
  const currentUrl = window.location.pathname;
  const mainButtons = document.querySelectorAll('.main-button');

  // Remove active class from all buttons first
  mainButtons.forEach(button => {
    button.classList.remove('active');
  });

  // Then add active class to the one matching the current URL
  mainButtons.forEach(button => {
    if (button.getAttribute('data-href') === currentUrl) {
      button.classList.add('active');
    }
  });
});

// BEFORE-SWAP: Trigger the exit animation and delay the swap until it's complete.
document.addEventListener("astro:before-preperation", (event) => {
  const currentUrl = window.location.pathname;
  const mainButtons = document.querySelectorAll('.main-button');
  let activeFound = false;

  // For the active button, remove the active class to trigger the exit animation.
  mainButtons.forEach(button => {
    if (button.getAttribute('data-href') === currentUrl && button.classList.contains('active')) {
      activeFound = true;
      button.classList.remove('active');
    }
  });

  // If an active button was found, prevent the swap and continue after 500ms.
  if (activeFound) {
    event.preventDefault();
    setTimeout(() => {
      event.detail.continue();
    }, 800);
  }
});

// Archive subitems onchange event
document.addEventListener("astro:page-load", () => {

  const currentUrl = window.location.pathname;
  const mainButtons = document.querySelectorAll('.main-button');

  // For the active button, remove the active class to trigger the exit animation.
  mainButtons.forEach(button => {
    if (button.getAttribute('data-href') === currentUrl && !button.classList.contains('active')) {
      button.classList.add('active');
    }
  });


  //navigation on archive subitems
  const archiveSubitems = document.querySelector('.archive-subitems');
  if (archiveSubitems) {
    archiveSubitems.onchange = (event) => {
      const href = event.target.value;
      navigate(href);
    };
  }
});

</script>


