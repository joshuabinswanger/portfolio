---
import BracketOpenH from "./BracketOpenH.astro";
import BracketCloseH from "./BracketCloseH.astro";
import BracketMiddleH from "./BracketMiddleH.astro";
import BracketOpenV from "./BracketOpenV.astro";
import BracketCloseV from "./BracketCloseV.astro";
import BracketMiddleV from "./BracketMiddleV.astro";
import Icon from "./Icon.astro";
import { getEntry } from 'astro:content';
import { getCollection } from "astro:content";
import { CldImage } from 'astro-cloudinary';

import 'keen-slider/keen-slider.min.css';
import "photoswipe/style.css";
import { marked } from 'marked';


// Get component props from Astro.props 
const { project } = Astro.props;

interface Props {
  project: string;
}

// Generate a unique ID for each instance
const instanceId = Math.random().toString(36).slice(2, 11);  

// Fetch the specific gallery project by the project name (slug)
const galleryProject = await getEntry('gallery', `${Astro.props.project}-gallery`);

if (!galleryProject) {
  throw new Error(`Project with slug "${Astro.props.project}-gallery" not found.`);  
}

// Turn Prop into string
const targetProject = String(project).split('_')[1];
console.log(`${targetProject}`);

// Use getCollection with a filter function to only retrieve images with a matching project
const galleryImages = await getCollection('galleryImages', ({ data }) => {
  return data.metadata?.project === targetProject;
});

// Sort galleryImages by public_id
galleryImages.sort((a, b) => a.data.public_id.localeCompare(b.data.public_id));

// Log the filtered results
/* galleryImages.forEach((entry) => {
  console.log(entry.data); // Logs entries sorted by public_id
}); */

const imagesAmount = galleryImages.length;
console.log(`Number of images: ${imagesAmount}`);
---

<div id={`slider-${instanceId}`} class:list={"GalleryElement "} data-instanceId={instanceId} data-imagesAmount={imagesAmount} data-galleryProject={galleryProject}>
  
  <div class:list={"SlidesContainer keen-slider"}>

    {galleryImages.map((image, index) =>  {

      
        return (
          <div id={`ImageContainer-${index}`} class:list={["keen-slider__slide"]} >
            <div class:list={"ImageInfo"}>
              <div class:list={"ImageInfoWrapper"}>
                <div id="spacer"></div>
                <BracketOpenV strokewidth="0.5px"/>
                <div class:list={"ImageDescriptionWrapper"}>
                  {image.data.metadata && (
                    <>
                      <p><strong>{image.data.metadata?.description_title}</strong></p>
                      <p>{image.data.metadata?.description_text}</p>
                    </>
                  )}
                </div>
                <BracketCloseV strokewidth="0.5px" />
                <div id="spacer"></div>
              </div>
            </div>
            
            <div class:list={"Filter"}></div>
              

            <div id="Image" class:list={["ImageElement"]} style={index > 1 ? 'display: none;' : ''}>
              <a class:list={["photo-link"]}
                href={image.data.secure_url}  
                data-pswp-width={image.data.width}
                data-pswp-height={image.data.height}
                target="_blank"
                data-description_title={image.data.metadata?.description_title}
                data-description_text={image.data.metadata?.description_text}
                >
           
                  <CldImage
                    src={image.data.public_id}
                    data-src={image.data.secure_url}   
                    width={image.data.width}
                    height={image.data.height}
                    sizes="(max-width: 650px) 90vw, (max-width: 1200px) 50vw, 33vw"
                    alt={image.data.metadata?.description_title}
                    format="avif"
                  
                  />
            
              </a>
            </div>
          </div>
        )
      }
    )}

    <div id="ProjectInfoSlide" class:list={["keen-slider__slide"]}>
      
      <div id="ProjectInfoSlideWrapper">
        <div id="spacer"></div>
          
        <BracketOpenV strokewidth="0.5px"/>

        <div class:list={"ProjectInfoWrapper"}>
          <Fragment set:html={marked.parse(galleryProject.data.projectDescription)} />
        </div>

        <div id="spacer"></div>

        <div class:list={"DetailsInfoWrapper"}>
          <Fragment set:html={marked.parse(galleryProject.data.credits)} />
        </div>

        <BracketCloseV strokewidth="0.5px" />
        
        <div id="spacer"></div>
      </div>
    </div>

  </div>

  <div id="GalleryDescriptionWrapper">
    <BracketOpenH />

    <div id="TextContainer">
      <div id="TextWrapper">
        <h1>{galleryProject.data.title}</h1>
        <h2>{galleryProject.data.subtitle}</h2>
      </div>
    </div>

   <BracketMiddleH />

    <div id="ArrowWrapper">
      <button class:list={["ArrowLeft"]}>&larr;</button>
      <div class:list={"CounterContainer"}>
        1 / {imagesAmount + 1}
      </div>
      <button class:list={["ArrowRight"]}>&rarr;</button>
    </div>

   <BracketMiddleH /> 

    <div id="Info">
      <Icon icon="Info" width="77%" />
    </div>

    <BracketCloseH />
  </div>
 
</div>

<!-- KeenSlider -->
<script>

import KeenSlider from 'keen-slider'

document.addEventListener('astro:page-load', () => {

const Sliders = document.querySelectorAll('.GalleryElement')

Sliders.forEach((item, index) => {
  console.log(`This is the slider at index ${index} with ID: ${item.id}`);

  // Select all Sliders
  const slides = item.querySelectorAll('.keen-slider__slide');
  // Select the ProjectInfoSlideWrapper within this slider
  const projectInfoSlideWrapper = item.querySelector('.ProjectInfoSlideWrapper');

  var loaded = []

  //Loading Function  
  function loadImages(s) {
    const slideIdx = s.track.details.rel;
    const totalSlides = s.track.details.slides.length;

    // Mark the current, previous, and next slide as loaded
    loaded[slideIdx] = true;
    loaded[(slideIdx + totalSlides) % totalSlides] = true; // Previous slide, wrapping around
    loaded[(slideIdx + 1) % totalSlides] = true; // Next slide, wrapping around

    s.slides.forEach((element, idx) => {
        if (loaded[idx]) {
          // Use querySelector to find the .ImageElement div
          const imageElement = element.querySelector('.ImageElement');
          console.log(`ImageElement found:`, imageElement);

          if (imageElement) {
            imageElement.style.display = "block";
          } else {
            console.warn(`.ImageElement not found in slide index ${idx}`);
          }
        } 
      })
  }

  //Counter Function
  function updateCounter(s) {
  const counterContainer = item.querySelector('.CounterContainer');
    if (counterContainer) {
      const currentSlide = s.track.details.rel + 1; // Add 1 because index is zero-based
      const totalSlides = s.track.details.slides.length;
      counterContainer.textContent = `${currentSlide} / ${totalSlides}`;
    }
  }

   //MaxHeight Function
  function setMaxHeight (s) {
    const activeSlide = s.track.details.rel;
    const height = s.size;
    console.log(`the slide has height: ${height}`)
    const projectInfoSlide = s.slides[s.slides.length - 1];
    console.log(`projectInfoSlide at index: ${projectInfoSlide.id}`)
    const projectInfoSlideWrapper = projectInfoSlide.querySelector('#ProjectInfoSlideWrapper');

    projectInfoSlideWrapper.style.maxHeight = `${height}px`;
  }




    var slider = new KeenSlider(item, {
      created: (s) => {
        loadImages(s);
        setMaxHeight(s);
      },
      slideChanged: loadImages,
      animationEnded: updateCounter,
      updated: setMaxHeight,
    
      slides: {
        spacing: 15,
      },
      loop: true,
      initial: 0,
      
    })


    // Add click event listeners to the arrow buttons
    const arrowLeft = item.querySelector('.ArrowLeft');
    const arrowRight = item.querySelector('.ArrowRight');

    if (arrowLeft) {
      arrowLeft.addEventListener('click', () => {
        slider.prev();
      });
    }

    if (arrowRight) {
      arrowRight.addEventListener('click', () => {
        slider.next();
      });
    }


// Function to toggle image info visibility
let imageInfoVisible = false; // Initial state

const toggleImageInfoVisibility = () => {
  // Get the current active slide
  const currentSlideIndex = slider.track.details.rel;
  const slides = item.querySelectorAll('.keen-slider__slide');
  const currentSlide = slides[currentSlideIndex];

  if (currentSlide) {
    const imageInfo = currentSlide.querySelector('.ImageInfo');
    if (imageInfo) {
      if (imageInfoVisible) {
        imageInfo.classList.remove('InfoVisible');
      } else {
        imageInfo.classList.add('InfoVisible');
      }
      imageInfoVisible = !imageInfoVisible; // Toggle the state
    }
  }
};

// Function to hide image info (when slide changes)
const hideImageInfo = () => {
  if (imageInfoVisible) {
    const slides = item.querySelectorAll('.keen-slider__slide');
    slides.forEach((slide) => {
      const imageInfo = slide.querySelector('.ImageInfo');
      if (imageInfo) {
        imageInfo.classList.remove('InfoVisible');
      }
    });
    imageInfoVisible = false;
  }
};

// Add click event listener to the #Info div of this specific gallery
const infoDiv = item.querySelector('#Info');
if (infoDiv) {
  infoDiv.addEventListener('click', toggleImageInfoVisibility);
} else {
  console.error(`Info div not found for selector: ${item.id}`);
}
   // IntersectionObserver hidden options
 let optionsHidden = {
			rootMargin: "400px",
		};
	
	// Define the IntersectionObserver
	const observerSlider = new IntersectionObserver((entries) => {  
		entries.forEach((entry) => {
			console.log(entry);
			if (entry.isIntersecting) {
        entry.target.classList.remove("restrain");
				slider.update();
			} 
		});
	}, optionsHidden);

  const hiddenElements = document.querySelectorAll(".observer");
  hiddenElements.forEach((el) => observerSlider.observe(el));
    
  }); 

  

});

 

</script>

<!-- PhotoSwipe -->
<script>
    
    import PhotoSwipeLightbox from 'photoswipe/lightbox';
    
    const leftArrowSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 155 139" "width="39" height="35"><path d="m0 69 69 69 14-12-45-46h116V58H38l44-44L69 0 0 69Z" style="fill-rule:nonzero"/></svg>';
    const CloseSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 139 139" "width="139" height="139"><path d="m69 83-56 55-13-12 56-57L0 14 13 0l56 56 56-56 13 14-55 55 55 57-13 12-56-55Z"/></svg>';
    
    
    
    function isPhonePortrait() {
          return window.matchMedia('(max-width: 650px) and (orientation: portrait)').matches;
        }
    
    
    
    
    document.addEventListener('astro:page-load', () => {
    
      
      let lightbox;
    
      const galleryElements = document.querySelectorAll(".GalleryElement");
    
    
      galleryElements.forEach((el, index) => {
    
        const instanceId = el.getAttribute('data-instanceid');
        const imageElements = document.querySelectorAll(`.ImageElement a`);
    
    
        const options = {
          arrowPrevSVG: leftArrowSVGString,
          arrowNextSVG: leftArrowSVGString,
          closeSVG: CloseSVGString,
    
          initialZoomLevel: `fit`,
          bgOpacity: 0.95,
          zoom: false,
          
          // to apply styles just to this instance of PhotoSwipe
          mainClass: 'pswp--custom-bg pswp--custom-icon-colors',
    
          paddingFn: () => {
            if (isPhonePortrait()) {
              return { top: 0, bottom: 0, left: 10, right: 10  }  
            }
            else {
              return { top: 20, bottom: 40, left: 100, right: 100 }
            };
          },
    
          showHideAnimationType: 'fade',
    
    
          gallery: `#slider-${instanceId}`,
          children: imageElements,
          pswpModule: () => import('photoswipe'), // Import the PhotoSwipe module dynamically
        };
        
       
        const lightbox = new PhotoSwipeLightbox(options);

        lightbox.on('uiRegister', function() {
          lightbox.pswp.ui.registerElement({
            name: 'custom-caption',
            order: 9,
            isButton: false,
            appendTo: 'wrapper',
            html: 'Caption text',
            onInit: (el, pswp) => {
              lightbox.pswp.on('change', () => {
                const currSlideElement = lightbox.pswp.currSlide.data.element;
                console.log('Current Slide Element:', currSlideElement);
                let captionHTML = '';

                if (currSlideElement) {
            
                    // Get the description from data-description attribute
                    const description_title = currSlideElement.getAttribute('data-description_title');
                    const description_text = currSlideElement.getAttribute('data-description_text')
                    if (description_title) {
                      captionHTML = `<p><strong>${description_title}</strong></p><p>${description_text}</p>`;
                    }

                }

                el.innerHTML = captionHTML || '';
              });
            }

          });
        });
    
        lightbox.init(); // Initialize the lightbox
        /* console.log (`${imageElements.id}`) */
        console.log(`lightbox instance: ${el.id}`)
    
    
      }); 

  
    
    });
    
    document.addEventListener("astro:before-swap", () => {
      const lightbox = new PhotoSwipeLightbox;
          lightbox.destroy();
      });
    
    </script>
  


<style>

@import "../styles/global.css";

.GalleryElement {
  display: grid;
  grid-template-rows: 1fr auto;
  gap: 3px;
}

.SlidesContainer {
  position: relative;
  width: 100%;
  height: 100%;
  box-shadow: 0px 0px 22px #988f821b;
}

a {
  height: 100%;
}
img {
  vertical-align: top; /* or middle, top, depending on the desired effect */
}

#ProjectInfoSlide {
  /* max-height: min-content; */
  align-content: center;
}

#ProjectInfoSlideWrapper {
  display: grid;
  font-size: var(--font-size-dekstop);
  width: min(70%, 66ch);
  grid-template-rows:   auto min-content min-content 2rem min-content min-content auto;
  align-items: center;
  margin: 0 auto; /* Add this line to center horizontally */
  overflow-x: hidden;

  @media (--bp-mobile) {
    font-size: var(--font-size-mobile);
  }

  @media (--bp-tablet) {
    font-size: var(--font-size-tablet);
  }

  @media (--bp-desktop-wide) {
    font-size: var(--font-size-desktop-wide);
  }

}

.Filter {
  position: absolute;
  top: 0;
  left: 0;
  background-color: #fbf9f400;
  width: 100%;
  height: 100%;
  backdrop-filter: blur(0px);
  z-index: 11;
  transition: backdrop-filter ease-in-out 0.2s, background-color ease-in-out 0.2s;
  pointer-events: none;
}

.hidden-image {
    display: none;
  }


/*   Image Info */



.ImageInfoWrapper {
  display: grid;
  width: min(88%, 66ch);
  height: 90%;
  grid-template-rows:   1fr min-content  min-content min-content 1fr;
  align-items: center;

}


.ImageInfo {
  position: absolute;
  top: 0;
  left: 0;
  opacity: 0;
  width: 100%;
  height: 100%;
  z-index: 10; /* Ensure it appears above the image */
  display: grid;
  justify-items: center;
  align-items: center;

  pointer-events: none; /* Prevent interaction with the description if needed */
  background-color: var(--bg-color-trans); /* Example style */
  
  /* Start with no blur (initial state) */
  backdrop-filter: blur(0px);

  /* Add transition for backdrop-filter */
  transition: backdrop-filter ease-in-out 0.3s, opacity 0.3s ease-in-out;

  font-size: var(--font-size-dekstop);
  hyphens: auto;

  overflow: hidden;

  @media (--bp-mobile) {
    font-size: var(--font-size-mobile);
  }

  @media (--bp-tablet) {
    font-size: var(--font-size-tablet);
  }

  @media (--bp-desktop-wide) {
    font-size: var(--font-size-desktop-wide);
    line-height: 1.33;
  }
}



.InfoVisible {
  opacity: 1;
  backdrop-filter: blur(22px);
  transition: opacity 0.3s, backdrop-filter 0.3s ease;
}


.ImageDescriptionWrapper, .ProjectInfoWrapper, .DetailsInfoWrapper {

  width: 80%;           /* Ensure it takes full width */
  justify-self: center; /* Centers items horizontally */
 

  span {
    font-family: PowerGrotesk-Medium;
  }

  @media (--bp-mobile) {
    width: 85%;
    }

}


/* GalleryDescription */

#GalleryDescriptionWrapper {
  display: grid;
  width: 100%;
  opacity: 1;
  height: fit-content;
  grid-template-columns: 1.5ch minmax(min-content, 2fr) 3ch minmax(9ch, 1.5fr) 3ch 3.5ch 1.5ch;
  justify-content: center;
  align-items: center;
  transition: opacity 1.5s ease-in;
}

#ArrowWrapper {
  display: grid;
  width: 100%;
  grid-template-columns: auto min-content auto;
  place-items: center;
}

button {
  all: unset;
  text-justify: center;
  text-align: center;
  width: stretch;
  cursor: pointer;
  padding: 0.5rem 0.5%;

}

.CounterContainer {
  text-align: center;
  width: 5ch;
  font-size: 19px;
  font-family: PowerGrotesk-Regular;
  font-weight: 400;
  padding: 0.5rem 0.5%;

  @media (--bp-mobile) {
    font-size: 15px;
  }
}

/* Text Elements */
#TextContainer {
  width: auto;
  display: grid;
  place-items: center;
}

h1 {
  font-family: PowerGrotesk-Regular;
  font-weight: 400;
  font-size: 19px;
  letter-spacing: 0.7px;
  margin: 0px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;

  @media (--bp-mobile) {
  font-size: 15px;
  }
}

h2 {
  font-family: PowerGrotesk-Light;
  font-weight: 200;
  font-size: var(--font-size-dekstop);
  letter-spacing: 0.5px;
  margin: 0px;

  @media (--bp-mobile) {
			font-size: var(--font-size-mobile);
  }

  @media (--bp-tablet) {
    font-size: var(--font-size-tablet);
  }

  @media (--bp-desktop-wide) {
    font-size: var(--font-size-desktop-wide);
  }

}

#Info {
  display: grid;
  place-items: center;
  cursor: pointer; /* Ensure it looks clickable */
  pointer-events: auto;
  margin: 0 -5px;
}


  
</style>