---
import BracketOpenH from "./BracketOpenH.astro";
import BracketCloseH from "./BracketCloseH.astro";
import BracketMiddleH from "./BracketMiddleH.astro";
import BracketOpenV from "./BracketOpenV.astro";
import BracketCloseV from "./BracketCloseV.astro";
import BracketMiddleV from "./BracketMiddleV.astro";
import Icon from "./Icon.astro";
import ImageElement from './ImageElementCloudinary.astro';
import { getEntry } from 'astro:content';
import { getCollection } from "astro:content";
import { CldImage } from 'astro-cloudinary';

import 'keen-slider/keen-slider.min.css';
import "photoswipe/style.css";
import { marked } from 'marked';

// Get component props from Astro.props
const { project } = Astro.props;

interface Props {
  project: string;
}

// Generate a unique ID for each instance
const instanceId = Math.random().toString(36).slice(2, 11);  

// Fetch the specific gallery project by the project name (slug)
const galleryProject = await getEntry('gallery', Astro.props.project + "-gallery"); // Use the `project` prop

if (!galleryProject) {
  throw new Error(`Project with slug "${Astro.props.project + "-gallery"}" not found.`);  
}



//Turn Prop into string
const targetProject = String(project).split('_')[1]; 
console.log(`${targetProject}`);

// Use getCollection with a filter function to only retrieve images with a matching project
const galleryImages = await getCollection('galleryImages', ({ data }) => {
  return data.metadata?.project === targetProject;
});


// Log the filtered results
galleryImages.forEach((entry) => {
  const projectValue =  entry.data.metadata?.project;
  console.log(`${projectValue}`); // Should only log entries matching the target project
});

const imagesAmount = 5 /* galleryImages.data.metadata?.project.value */;


---

<div id={`slider-${instanceId}`} class:list={"GalleryElement "}  data-instanceId={instanceId} data-imagesAmount={imagesAmount} data-galleryProject={galleryProject} >
  
  <div class:list={"SlidesContainer keen-slider"} >

    {galleryProject.data.images.map((image, index) => (
      

        <div id={`ImageContainer-${index}`} class:list={["keen-slider__slide"]}>

          <div class:list={ "ImageInfo"}>

          {<div class:list={"ImageInfoWrapper"}>
            <div id="spacer"></div>
            <BracketOpenV strokewidth="0.5px"/>

              <div class:list={"ImageDescriptionWrapper"}>
                {galleryImages[index] &&  (
                  <p><strong>{galleryImages[index].data.metadata?.description_title}</strong></p>
                  <p>{galleryImages[index].data.metadata?.description_text}</p>
                  )
                }
              
              </div>

            <BracketCloseV strokewidth="0.5px" />
            <div id="spacer"></div>
          </div>}

          

          </div>

          <div class:list={"Filter"}>
          </div>


          <div id="Image" class:list={["ImageElement", index >= 2 ? 'hidden-image' : '']}>
              {galleryImages[index] &&  (
                  <CldImage
                  src={galleryImages[index].data.public_id}
                  width={galleryImages[index].data.width}
                  height={galleryImages[index].data.height}
                  alt=""
                  />
                )
              }
          </div>

        </div>
    ))}

    <div id="ProjectInfoSlide" class:list={["keen-slider__slide"]}>
      
      <div id="ProjectInfoSlideWrapper">
        <div id="spacer"></div>
          
        <BracketOpenV strokewidth="0.5px"/>

        <div class:list={"ProjectInfoWrapper"}>
          <Fragment set:html={marked.parse(galleryProject.data.projectDescription) } />
        </div>

        <div class:list={"DetailsInfoWrapper"}>
          <Fragment set:html={marked.parse(galleryProject.data.credits)} />
        </div>

        <BracketCloseV strokewidth="0.5px" />
        
        <div id="spacer"></div>
      </div>
    </div>

  </div>

  <div id="GalleryDescriptionWrapper">
    <BracketOpenH />

    <div id="TextContainer">
      <div id="TextWrapper">
        <h1>{galleryProject.data.title}</h1>
        <h2>{galleryProject.data.subtitle}</h2>
      </div>
    </div>

   <BracketMiddleH />

    <div id="ArrowWrapper">
      <button class:list={["ArrowLeft"]}>&larr;</button>
      <div class:list={"CounterContainer"}></div>
      <button class:list={["ArrowRight"]}>&rarr;</button>
    </div>

   <BracketMiddleH /> 

    <div id="Info">
      <Icon icon="Info" width="77%" />
    </div>

    <BracketCloseH />
  </div>
 
</div>
 

<!-- KeenSlider -->
<script>

import KeenSlider from 'keen-slider'

document.addEventListener('astro:page-load', () => {

const Sliders = document.querySelectorAll('.GalleryElement')



  Sliders.forEach((item, index) => {
    console.log(`This is the slider at index ${index} with ID: ${item.id}`);

    var slider = new KeenSlider(item, {
        slides: {
          spacing: 15,
        },
        loop: true,
        initial: 0,
        slideChanged(s) {
          updateCounter(s);
          hideImageInfo();
          updateSlideVisibility(s);
        },
      })


      const updateCounter = (sliderInstance) => {
      const counterContainer = item.querySelector('.CounterContainer');
      if (counterContainer) {
        const currentSlide = sliderInstance.track.details.rel + 1; // Add 1 because index is zero-based
        const totalSlides = sliderInstance.track.details.slides.length;
        counterContainer.textContent = `${currentSlide} / ${totalSlides}`;
      }
    };

    // Initial counter update when the slider is first loaded
    updateCounter(slider);


    // Add click event listeners to the arrow buttons
    const arrowLeft = item.querySelector('.ArrowLeft');
    const arrowRight = item.querySelector('.ArrowRight');

    if (arrowLeft) {
      arrowLeft.addEventListener('click', () => {
        slider.prev();
      });
    }

    if (arrowRight) {
      arrowRight.addEventListener('click', () => {
        slider.next();
      });
    }


    // Function to toggle image info visibility
    let imageInfoVisible = false; // Initial state

    const toggleImageInfoVisibility = () => {
      // Get the current active slide
      const currentSlideIndex = slider.track.details.rel;
      const slides = item.querySelectorAll('.keen-slider__slide');
      const currentSlide = slides[currentSlideIndex];

      if (currentSlide) {
        const imageInfo = currentSlide.querySelector('.ImageInfo');
        if (imageInfo) {
          if (imageInfoVisible) {
            imageInfo.classList.remove('InfoVisible');
          } else {
            imageInfo.classList.add('InfoVisible');
          }
          imageInfoVisible = !imageInfoVisible; // Toggle the state
        }
      }
    };

    // Function to hide image info (when slide changes)
    const hideImageInfo = () => {
      if (imageInfoVisible) {
        const slides = item.querySelectorAll('.keen-slider__slide');
        slides.forEach((slide) => {
          const imageInfo = slide.querySelector('.ImageInfo');
          if (imageInfo) {
            imageInfo.classList.remove('InfoVisible');
          }
        });
        imageInfoVisible = false;
      }
    };

    // Add click event listener to the #Info div of this specific gallery
    const infoDiv = item.querySelector('#Info');
    if (infoDiv) {
      infoDiv.addEventListener('click', toggleImageInfoVisibility);
    } else {
      console.error(`Info div not found for selector: ${item.id}`);
    }


// Function to update slide visibility
const updateSlideVisibility = (sliderInstance) => {
  const totalSlides = sliderInstance.track.details.slides.length;
  const currentSlideIndex = sliderInstance.track.details.rel;
  const slides = item.querySelectorAll('.keen-slider__slide');

  slides.forEach((slide, index) => {
    const imageDiv = slide.querySelector('.ImageElement');
    if (imageDiv) {
      // Calculate indices to show, wrapping around using modulo
      const indicesToShow = [
        (currentSlideIndex - 1 + totalSlides) % totalSlides,
        currentSlideIndex,
        (currentSlideIndex + 1) % totalSlides,
      ];

      if (indicesToShow.includes(index)) {
        imageDiv.classList.remove('hidden-image');
      } else {
        imageDiv.classList.add('hidden-image');
      }
    }
  });
};

    // Observer to detect when hidden images become visible
    const hiddenImages = item.querySelectorAll('.ImageElement.hidden-image');
    const options = {
      rootMargin: '200px 0px',
      threshold: 0.01,
    };

    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const imageDiv = entry.target;
          imageDiv.classList.remove('hidden-image');
          // Update slider to account for the new visible slide
          slider.refresh();
          observer.unobserve(imageDiv);
        }
      });
    }, options);

    hiddenImages.forEach((img) => imageObserver.observe(img));


    
  }); 

});
</script>

<!-- PhotoSwipe -->
<script>
    
    import PhotoSwipeLightbox from 'photoswipe/lightbox';
    
    const leftArrowSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 155 139" "width="39" height="35"><path d="m0 69 69 69 14-12-45-46h116V58H38l44-44L69 0 0 69Z" style="fill-rule:nonzero"/></svg>';
    const CloseSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 139 139" "width="139" height="139"><path d="m69 83-56 55-13-12 56-57L0 14 13 0l56 56 56-56 13 14-55 55 55 57-13 12-56-55Z"/></svg>';
    
    
    
    function isPhonePortrait() {
          return window.matchMedia('(max-width: 650px) and (orientation: portrait)').matches;
        }
    
    
    
    
    document.addEventListener('astro:page-load', () => {
    
      
      let lightbox;
    
      const galleryElements = document.querySelectorAll(".GalleryElement");
    
    
      galleryElements.forEach((el, index) => {
    
        const instanceId = el.getAttribute('data-instanceid');
        const imageElements = document.querySelectorAll(`.ImageElement a`);
    
    
        const options = {
          arrowPrevSVG: leftArrowSVGString,
          arrowNextSVG: leftArrowSVGString,
          closeSVG: CloseSVGString,
    
          initialZoomLevel: `fit`,
          bgOpacity: 0.95,
          zoom: false,
          
          // to apply styles just to this instance of PhotoSwipe
          mainClass: 'pswp--custom-bg pswp--custom-icon-colors',
    
          paddingFn: () => {
            if (isPhonePortrait()) {
              return { top: 0, bottom: 0, left: 10, right: 10  }  
            }
            else {
              return { top: 20, bottom: 40, left: 100, right: 100 }
            };
          },
    
          showHideAnimationType: 'fade',
    
    
          gallery: `#slider-${instanceId}`,
          children: imageElements,
          pswpModule: () => import('photoswipe'), // Import the PhotoSwipe module dynamically
        };
        
       
        const lightbox = new PhotoSwipeLightbox(options);

        lightbox.on('uiRegister', function() {
          lightbox.pswp.ui.registerElement({
            name: 'custom-caption',
            order: 9,
            isButton: false,
            appendTo: 'wrapper',
            html: 'Caption text',
            onInit: (el, pswp) => {
              lightbox.pswp.on('change', () => {
                const currSlideElement = lightbox.pswp.currSlide.data.element;
                console.log('Current Slide Element:', currSlideElement);
                let captionHTML = '';

                if (currSlideElement) {
            
                    // Get the description from data-description attribute
                    const description = currSlideElement.getAttribute('data-description');
                    if (description) {
                      captionHTML = description;
                    }

                }

                el.innerHTML = captionHTML || 'HelloThere';
              });
            }

          });
        });
    
        lightbox.init(); // Initialize the lightbox
        /* console.log (`${imageElements.id}`) */
        console.log(`lightbox instance: ${el.id}`)
    
    
      }); 

  
    
    });
    
    document.addEventListener("astro:before-swap", () => {
      const lightbox = new PhotoSwipeLightbox;
          lightbox.destroy();
      });
    
    </script>



<style>

@import "../styles/global.css";

.GalleryElement {
  display: grid;
  grid-template-rows: 1fr auto;
  gap: 3px;
}

.SlidesContainer {
  position: relative;
  width: 100%;
  height: 100%;
  box-shadow: 0px 0px 22px #988f821b;
}

#ProjectInfoSlideWrapper {
  display: grid;
  width: min(70%, 66ch);
  height: 100%;
  grid-template-rows:   auto min-content min-content min-content min-content auto;
  align-items: center;
  margin: 0 auto; /* Add this line to center horizontally */

  @media (--bp-mobile) {
    font-size: 12px;
  }

  @media (--bp-tablet) {
    font-size: 12px;
  }

}

.Filter {
  position: absolute;
  top: 0;
  left: 0;
  background-color: #fbf9f400;
  width: 100%;
  height: 100%;
  backdrop-filter: blur(0px);
  z-index: 11;
  transition: backdrop-filter ease-in-out 0.2s, background-color ease-in-out 0.2s;
  pointer-events: none;
}

.hidden-image {
    display: none;
  }


/*   Image Info */



.ImageInfoWrapper {
  display: grid;
  width: min(88%, 66ch);
  height: 90%;
  grid-template-rows:   1fr min-content  min-content min-content 1fr;
  align-items: center;

}


.ImageInfo {
  position: absolute;
  top: 0;
  left: 0;
  opacity: 0;
  width: 100%;
  height: 100%;
  z-index: 10; /* Ensure it appears above the image */
  display: grid;
  justify-items: center;
  align-items: center;

  pointer-events: none; /* Prevent interaction with the description if needed */
  background-color: var(--bg-color-trans); /* Example style */
  
  /* Start with no blur (initial state) */
  backdrop-filter: blur(0px);

  /* Add transition for backdrop-filter */
  transition: backdrop-filter ease-in-out 0.3s, opacity 0.3s ease-in-out;

  font-size: 0.8rem;
  hyphens: auto;

  overflow: hidden;

  @media (--bp-mobile) {
    font-size: 0.6rem;
  }

  @media (--bp-desktop-wide) {
    font-size: 1rem;
    line-height: 1.33;
  }
}

.InfoVisible {
  opacity: 1;
  backdrop-filter: blur(22px);
  transition: opacity 0.3s, backdrop-filter 0.3s ease;
}


.ImageDescriptionWrapper, .ProjectInfoWrapper, .DetailsInfoWrapper {

  width: 80%;           /* Ensure it takes full width */
  justify-self: center; /* Centers items horizontally */
 

  span {
    font-family: PowerGrotesk-Medium;
  }

  @media (--bp-mobile) {
    width: 85%;
    }

}


/* GalleryDescription */

#GalleryDescriptionWrapper {
  display: grid;
  width: 100%;
  opacity: 1;
  height: fit-content;
  grid-template-columns: 1.5ch minmax(min-content, 2fr) 3ch minmax(9ch, 1.5fr) 3ch 3.5ch 1.5ch;
  justify-content: center;
  align-items: center;
  transition: opacity 1.5s ease-in;
}

#ArrowWrapper {
  display: grid;
  width: 100%;
  grid-template-columns: auto min-content auto;
  place-items: center;
}

button {
  all: unset;
  text-justify: center;
  text-align: center;
  width: stretch;
  cursor: pointer;
  padding: 0.5rem 0.5%;

}

.CounterContainer {
  text-align: center;
  width: 5ch;
  font-size: 1rem;
  padding: 0.5rem 0.5%;

  @media (--bp-mobile) {
    font-size: 0.8rem;
  }
}

/* Text Elements */
#TextContainer {
  width: auto;
  display: grid;
  place-items: center;
}

h1 {
  font-family: PowerGrotesk-Medium;
  font-weight: 600;
  font-style: normal;
  font-size: 1rem;
  letter-spacing: 0.7px;
  margin: 0px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;

  @media (--bp-mobile) {
  font-size: 0.6rem;
  }
}

h2 {
  font-family: PowerGrotesk-Light;
  font-weight: 200;
  font-style: italic;
  font-size: 0.8rem;
  letter-spacing: 0.5px;
  margin: 0px;

  @media (--bp-mobile) {
  font-size: 0.6rem;
  }

}

#Info {
  display: grid;
  place-items: center;
  cursor: pointer; /* Ensure it looks clickable */
  pointer-events: auto;
  margin: 0 -5px;
}


  
</style>